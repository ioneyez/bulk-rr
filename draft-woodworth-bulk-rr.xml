<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC2536 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2536.xml">
<!ENTITY RFC2931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <email>shash.raghu@gmail.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern based
creation of DNS resource records to be used in place of NXDOMAIN
errors which would normally be returned.  These records are currently
restricted to registered DNS resource record types A, AAAA, PTR and
CNAME.  The key benefit of the BULK resource record type is the
simplification of maintaining "generic" record assignments which would
otherwise be too many to manage or require scripts or proprietary
methods as bind's $GENERATE.</t>

<t>This document updates RFCs 2308, 4033, 4034 and 4035.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS Resource Record (BULK) defines a maskable pattern based
method for real-time on-the-fly resource record
generation. Specifically, it allows one to manage large blocks of DNS
records based entirely on record owner data in the RR query and
patterns (or templates) designed by knowledgeable zone
administrators. Existing DNS resource records covered by this document
are Address (A), IPv6 Address (AAAA), Pointer (PTR) and Canonical Name
(CNAME). Although other RR types are not explicitly forbidden from use
with BULK logic they fall outside of scope and will not be discussed
in this document.  This document defines the purpose of this new
resource record (BULK), its RDATA format, its presentation format
(ASCII representation) as well as generated responses to matched DNS
queries.</t>

<t>Two Key benefits of this record type are; a) the ability to transfer
BULK RR intentions from primary to secondary nameservers with minimal
bandwidth and memory requirements; and b) the ability to manage large
volumes of pattern based records such as an IPv6 /64 CIDR or larger in
a single entry.</t>

<t>Support options for DNSSEC related complications resulting from
dynamically generated records are also provided in this document.  One
such option is in the form of the Numeric Pattern Normalization (NPN)
resource record type also described in this document.  NPN resource
records provide a way of generating pattern based DNSSEC signatures
and securely performing DNSSEC validation on such signatures.</t>

<section anchor="background-and-related-documents" title="Background and Related Documents">

<t>This document assumes the reader is familiar with the basic DNS
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, and the subsequent
documents that update them, particularly <xref target="RFC2181"/> and <xref target="RFC2308"/>.</t>

<t>The reader is also assumed to be familiar with DNSSEC basics as
described in <xref target="RFC4033"/>, <xref target="RFC4034"/> and <xref target="RFC4035"/> as well as the DNS
cryptographic signature generation process described in <xref target="RFC4033"/>,
<xref target="RFC4034"/>, <xref target="RFC4035"/>, <xref target="RFC2536"/>, <xref target="RFC2931"/> and <xref target="RFC3110"/>.</t>

</section>
<section anchor="reserved-words" title="Reserved Words">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record consists of details which enable a DNS
nameserver to generate RRs of other types based upon query received
and patterns provided.  Unless otherwise stated the letters used in
hexadecimal numbers (a-f) MUST be case insensitive and are assumed to
be lowercase. All examples in this document using hexadecimal are
provided in lowercase.</t>

<t>The Type value for the BULK RR type is XX.</t>

<t>The BULK RR is class independent.</t>

<t>The BULK RR has no special TTL requirements but some security
guidelines are offered in a later section.</t>

<section anchor="bulk-optional-hidden-wildcards" title="BULK OPTIONAL Hidden Wildcards">

<t>The BULK RR extends current wildcard substitution logic as defined in
<xref target="RFC1034"/> by allowing a single hyphen "-" in the leftmost label to
represent the intent of leveraging a modified wildcard matching
mechanism.  If this condition exists wildcard logic SHALL be used for
generated replacement records but not for the BULK resource records
themselves.  This will become clearer in the "BULK Replacement"
section of this document.  If an asterisk "*" (the standard wildcard
character) is used default wildcard behavior MUST be used.</t>

</section>
<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR consists of a 2 octet Match Type Field, a
Domain Name Pattern Field and a Replacement Pattern Field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type Field">

<t>The Match Type field identifies the type of the RRset identified by
this BULK record.  This field consists of two octets corresponding to
an RR TYPE code as specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

</section>
<section anchor="the-domain-name-pattern-field" title="The Domain Name Pattern Field">

<t>The Domain Name Pattern Field consists of a text string which may be
evaluated by the sections below.  The character encoding for this
field is <xref target="us-ascii"></xref> and may not contain whitespace unless enclosed
within double-quote characters.  The value of a single hyphen "-" has
special implications and will be discussed in greater detail below.</t>

<t>The following syntax specification uses the Augmented Backus-Naur
Form (ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
      DIGIT  = <as defined in RFC 5234 Appendix B.1>
      HEXDIG = <as defined in RFC 5234 Appendix B.1>
      DQUOTE = <as defined in RFC 5234 Appendix B.1>

      pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

      part                =   "\[" range "]" / string

      range               =   number [ "-" number ]

      number              =   1*DIGIT / 1*HEXDIG

      string              =   1*( %x01-5A / %x5C / %x5E-7F )
                                 ; Any [US-ASCII] character excluding
                                 ; NUL and square bracket characters
                                 ; "\[" or "]"
]]></artwork></figure>

<t>Although allowed by <xref target="RFC2181"/>; the square bracket characters, "["
and "]", are reserved to enclose a range specification and MUST NOT
appear anywhere outside of a range specification.</t>

<section anchor="single-hyphen" title="Single hyphen">

<t>If the domain name pattern field consists of a single hyphen it is not
necessary to evaluate for numeric ranges or strings.  Implementers
SHOULD simply set a flag indicating all ranges matching the query's
label are true and backreferences (described in further detail in the
"BULK Replacement" section) will be automatically set.</t>

</section>
<section anchor="numeric-ranges" title="Numeric ranges">

<t>Numeric ranges include decimal or hexadecimal ranges depending on
which record type was used in the query.  This logic will be described
in further detail in the "Replacement Logic" section.</t>

<t>The numeric range pattern will be a range of allowed numbers lower and
upper values separated by a single hyphen "-".  If upper and lower
values are identical a single numeric value (without hyphen) will
suffice.  To easily distinguish numeric range patterns from string
values they MUST be enclosed within square brackets "[" and "]".</t>

</section>
<section anchor="string-values" title="String values">

<t>All values found before or after Numeric ranges (excluding
single-hyphen rule) are considered to be string values.  These values
will be taken literally when evaluating for pattern matches in the
"BULK Replacement" section below.</t>

</section>
</section>
<section anchor="the-replacement-pattern-field" title="The Replacement Pattern Field">

<t>The Replacement Pattern field describes how the answer RRset SHOULD be
generated for the matching query.  It can either be a single hyphen
"-" or a string containing backreferences (described in further detail
in the "BULK Replacement" section).  This field MUST be evaluated for
proper syntax for resource records of its Match Type defined above.  A
"read" evaluation MAY be performed when a zone is first committed to
memory either while converting from Text to Wire format (from stored
zone files) or when a RR transfer is received (raw Wire format).
Stage two "write" evaluations MUST be performed prior to returning
generated replacement answers.  Since logic to perform a stage two
evaluation is already a requirement for DNS nameservers it may be
easier for implementers to perform just stage two evaluations.
Stage-two-only evaluation may be also preferred for performance
purposes and is acceptable behavior.  Any stage two evaluation errors
MUST be processed as if the record did not exist and if all BULK
generated records for a query answer-set evaluate to errors the
original condition of an NXDOMAIN error state MUST be restored.</t>

<t>The following syntax specification uses the Augmented Backus-Naur Form
(ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
    DIGIT  = <as defined in RFC 5234 Appendix B.1>
    HEXDIG = <as defined in RFC 5234 Appendix B.1>
    DQUOTE = <as defined in RFC 5234 Appendix B.1>

    pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

    part                =   backreference / string

    backreference       =   "$" "{" substitution "}"

    substitution        =   range 0*( "," range ) [ options ]

    substitution        =/  "*" [ options ]

    options             =   delimiter [ interval [ padding ] ]

    delimiter           =   "|" 0*1( %x01-23 / %x25-7A / %7E-7F )
                               ; Any single [US-ASCII] character
                               ; excluding NUL, dollar sign "$",
                               ; pipe "|" and curly brace characters
                               ; "{" or "}"

    interval            =   "|" *2DIGIT

    padding             =   "|" *2DIGIT

    range               =   number [ "-" number ]

    number              =   1*DIGIT / 1*HEXDIG

    string              =   1*( %x01-23 / %x25-7A / %x7C / %7E-7F )
                               ; Any [US-ASCII] character excluding
                               ; NUL, dollar sign "$" and curly brace
                               ; characters "{" or "}"
]]></artwork></figure>

<t>The dollar sign, "$", and curly brace characters, "{" and "}", are
reserved to enclose regular-expression-esque backreferences and MUST
NOT appear anywhere outside of such a backreference specification.
This rigidity is necessary to simplify implementation of this document
and may relax once adoption reaches an acceptable level and demand for
such an exception exists.  The authors feel this limitation is a
reasonable limitation for the flexibility offered by this document.</t>

</section>
</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Domain Name Pattern and Replacement Pattern fields MUST be
presented as the TXT RR type described in <xref target="RFC1035"/>, Section 3.3.14.</t>

</section>
<section anchor="bulk-rr-examples" title="BULK RR Examples">

<t>EXAMPLE 1</t>

<t>The following BULK RR stores a block of A RRs for example.com.</t>

<figure><artwork><![CDATA[
*.example.com. 86400 IN BULK A (
                         pool-A-[0-255]-[0-255].example.com.
                         10.55.${1}.${2}
                     )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "A" indicates that this BULK RR defines the A record
type (Address).  Value "pool-A-[0-255]-[0-255].example.com." indicates
the Domain Name Pattern.  Value "10.55.${1}.${2}" indicates the
Replacement Pattern.  The owner in this example is a wildcard and
matches any query ending with the string right of the asterisk.</t>

<t>EXAMPLE 2</t>

<t>The following BULK RR stores the reverse block of PTR records for the
first example.</t>

<figure><artwork><![CDATA[
*.55.10.in-addr.arpa. 86400 IN BULK PTR (
                             \[0-255].\[0-255].55.10.in-addr.arpa.
                             pool-A-${1}-${2}.example.com.
                         )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "PTR" indicates that this BULK RR defines the PTR
record type (Pointer).  Value "[0-255].[0-255].55.10.in-addr.arpa."
indicates the Domain Name Pattern.  Value
"pool-A-${1}-${2}.example.com." indicates the Replacement Pattern.
The owner in this example is a wildcard and matches any query ending
with the string right of the asterisk.</t>

<t>Additional examples can be found in the "BULK Replacement" section.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>The BULK Record is designed to enable DNS zone maintainers to manage
large blocks of DNS RRs which all conform to a common pattern. The
Domain Name Pattern field provides both a tertiary filter (after owner
and type) and a definition of all numeric pattern ranges.</t>

<t>When a query is first received by a DNS nameserver it begins its job
of locating an answer-set.  In its simplest form this begins by
locating the query owner (or wildcard suffix), class and type then
returning any matching RR RDATA (or errors).</t>

<t>In the event no matches for the query are found the nameserver of
authority will return an error type defined as NXDOMAIN.  In the case
of a "BULK" enabled authoritative nameserver an additional step MUST
be performed.  The nameserver MUST query its local RR database for any
"BULK" RRs with a matching owner, class and compatible Match Type.  If
any such RRs are found the query's owner MUST then be matched against
the Domain Name Pattern and all matching BULK records MUST be placed
into a temporary processing answer-set.  This temporary processing
answer-set MUST then follow the Replacement Pattern for each matched
record and provided no errors are found SHALL then write this new
answer-set to the query's complete answer set.  Matching replacements
will be of the type specified in the Match Type field of the
corresponding BULK RR. Additional detail is provided in the following
sections.</t>

<section anchor="matching-bulk-owner-field" title="Matching BULK &quot;owner&quot; field">

<t>The owner field of all BULK records MUST be that of either a wildcard
or hidden wildcard as defined in previous sections.  While a hidden
wildcard will not be searched for BULK records it will be added to the
database for use with the corresponding type field of each BULK RR.
This allows location of BULK records to be less conspicuous to the
public while still leveraging logic already included in the nameserver
thus minimizing the complexity of implementation.</t>

<t>A query SHALL pass the first filter stage (owner match) ONLY IF: (1)
an NXDOMAIN is set as the query's current answer set AND (2) the
query's owner ends with the BULK record's owner field past the leading
hyphen "-" or asterisk "*".</t>

</section>
<section anchor="matching-the-bulk-match-type-field" title="Matching the BULK &quot;Match Type&quot; field">

<t>The RR type of the received query must be compatible with that of the
Match Type of owners matched in the section above.  That is to say a
query for an "A" record will only match BULK records with matching
owner and Match Types of "A" (or "CNAME").  All other BULK records
matching the query's owner are incompatible and MUST be ignored as
part of the selected answer set.</t>

</section>
<section anchor="matching-the-bulk-domain-name-pattern-field" title="Matching the BULK &quot;Domain Name Pattern&quot; field">

<t>Assuming the RR owner and Match Type fields match the next step is to
find compatible Domain Name Patterns.  The logic for this falls into
two categories; automatic and manual which are described in greater
detail in the following sections.</t>

<section anchor="automatic-domain-name-pattern-matching" title="Automatic Domain Name Pattern matching">

<t>Automatic Domain Name Pattern matching is determined by use of a
single hyphen "-" as the value for Domain Name Pattern field.  This
assumes everything matches and all hexadecimal or decimal fields will
be captured for use as backreferences in the Replacement Pattern
(described below).  Automatic Domain Name Pattern matching is often
preferred for large blocks such as the reverse IPv6 address space for
the simplicity of record management.</t>

</section>
<section anchor="manual-domain-name-pattern-matching" title="Manual Domain Name Pattern matching">

<t>Manual Domain Name Pattern matching, while more complex is designed to
be both simple to implement and simple to use.  Below is an example
implementation for label matching using a combination of parsing by
regular expression and matching of numeric ranges.</t>

<t>Domain Name Patterns evaluate to current zone ORIGIN as defined in
<xref target="RFC1034"/>, Section 3.  In short this means all Manual Domain Name
Patterns must be terminated with a period "." or are assumed relative
to the RR's origin.</t>

<t>Numeric Ranges are either decimal or hexadecimal as determined by
conditions of query.</t>

<t><list style="symbols">
  <t>If query type is "A" ranges are set to decimal.</t>
  <t>If query type is "AAAA" ranges are set to hexadecimal.</t>
  <t>If query type is PTR or CNAME the RR owner is used to determine
decimal or hexadecimal.</t>
</list></t>

<t>** If RR owner ends in ".ip6.arpa.", ranges are set to hexadecimal.</t>

<t>** If RR owner does not end in ".ip6.arpa.", ranges are set to decimal.</t>

<t>The square bracket characters, "[" and "]", are reserved to enclose a
range specification and MUST NOT appear anywhere outside of a range
specification.</t>

<section anchor="manual-domain-name-pattern-matching-examples" title="Manual Domain Name Pattern matching examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.4"
with an origin of "2.10.in-addr.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>[0-255].[0-10] == [0-255].[0-10].2.10.in-addr.arpa.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner != "*.ip6.arpa." so range is decimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
   \[0-255].\[0-10].2.10.in-addr.arpa. ==
        /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
   4.3.2.10.in-addr.arpa. =~
        /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>"4" is captured and within range 0-255 (decimal)
"3" is captured and within range 0-10 (decimal)</t>

<t>EXAMPLE 2</t>

<t>For this example the query is defined as a PTR record for "fc00::55"
with an origin of "0.0.c.f.ip6.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.0.0.c.f.ip6.arpa. 86400 IN BULK PTR (
                              -
                              pool-${1-16|}-${17-28|}.example.com.
                          )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<figure><artwork><![CDATA[
   - == \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa.
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>Since Hyphen invokes "Automatic Domain Name Pattern" matching, all
fields are captured for future use as backreferences.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner == "*.ip6.arpa." so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa. ==
               /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
5.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.                            ~~
0.0.0.0.0.0.0.0.0.0.0.0.0.0.c.f.ip6.arpa.
            =~ /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<figure><artwork><![CDATA[
"5" is captured and within range 0-f (hexadecimal)
"5" is captured and within range 0-f (hexadecimal)
...
"0" is captured and within range 0-f (hexadecimal)
"0" is captured and within range 0-f (hexadecimal)
]]></artwork></figure>

<t>EXAMPLE 3
For this example the query is defined as an "AAAA" record for "pool-A-ff-aa.example.com." with an origin of "example.com." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>pool-A-[0-ffff]-[0-ffff] == pool-A-[0-ffff]-[0-ffff].example.com.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "AAAA" so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
pool-A-\[0-ffff]-\[0-ffff].example.com. ==
     /^pool-A(-(\[0-9a-fA-F]{1,4})){2}\.example\.com\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
pool-A-ff-aa.example.com. =~
  /^pool-A-(\[0-9a-fA-F]{1,4})-(\[0-9a-fA-F]{1,4})\.example\.com\.$/
]]></artwork></figure>

<t>"ff" is captured and within range 0-ffff (hexadecimal)
"aa" is captured and within range 0-ffff (hexadecimal)</t>

</section>
</section>
</section>
<section anchor="record-generation-using-the-bulk-replacement-pattern-field" title="Record Generation using the BULK &quot;Replacement Pattern&quot; field">

<t>Once it has been determined a query meets all criteria for a BULK
record generation the below rules are followed to process captured
numeric data and Replacement Pattern into RRs to apply to the
answer-set.</t>

<section anchor="replacement-pattern-backreferences" title="Replacement Pattern Backreferences">

<t>Before a record may be generated data must be captured in the Domain
Name Pattern comparison step above.  Each provided numeric range is
assigned to a temporary buffer to be used in this step.  To make the
jobs' of zone administrators easier the order of these buffers will
change based on the Match Type and owner so they will default to feel
more natural or intuitive.  Captured patterns and backreferences are
in the same vein as regular expressions and are intended to feel
"familiar".  This is described in further detail (with examples) in
the sections below.</t>

<section anchor="backreference-notation" title="Backreference Notation">

<t>BULK RRs use a dollar-sign "$" and curly braces "{" and "}" to enclose
backreferences within the Replacement Pattern.  The following rules
are used to determine the final replacement string.</t>

<section anchor="simple-numeric-backreference-replacement" title="Simple numeric backreference replacement">

<t>The simplest form of backreference notation is its numeric form.  In
this form only the backreference number falls between the curly braces
"{" and "}".  An example is "${1}" which would be replaced by the
value in the first capture position.  Position is described in detail
in a later section.</t>

<t>Numeric backreference replacement indices start with one "1" to
maintain consistency with regular expression backreferences.</t>

</section>
<section anchor="star-backreference-replacement" title="Star backreference replacement">

<t>The next form of backreference notation is its star (or asterisk "<spanx style="emph">")
form.  In this form only an asterisk falls between the curly braces
"{" and "}".  This form "${</spanx>}" would be replaced by all captured
values in order of ascending position delimited by its default
delimiter (described below).  Position is described in detail in a
later section.</t>

</section>
<section anchor="numeric-range-backreference-replacement" title="Numeric range backreference replacement">

<t>The next form of backreference notation is the numeric range form. In
this form a range of numbers falls between the curly braces "{" and
"}".  An example of this is "${1-4}" which would be replaced by all
captured values within this range (1-4) in order of positions provided
delimited its default delimiter (described below).  To reverse the
order of positions in this example one could simply reverse the upper
and lower values to look like "${4-1}".  Position is described in
detail in a later section.</t>

</section>
<section anchor="numeric-set-backreference-replacement" title="Numeric set backreference replacement">

<t>The next form of backreference notation is the numeric set form.  In
this form a set of numbers falls between the curly braces "{" and "}"
separated by commas.  An example of this is "${1,4}" which would be
replaced by the first and fourth captured values in the order of
position provided delimited its default delimiter (described below).
Position is described in detail in a later section.</t>

<t>This notation may be combined with the numeric range form allowing
specific positions or position ranges to be used.  Examples would be
"${3,2,1,4-8}" and "${8-12,1-4}".</t>

</section>
<section anchor="backreference-delimiter" title="Backreference delimiter">

<t>The above sections reference a default delimiter.  In an effort to
provide an intuitive zone management experience the default delimiter
will be based on the BULK RR's Match Type.  For Match Type "A" the
default delimiter SHALL be a period ".", for Match Type "AAAA" the
default delimiter SHALL be a colon ":" and for Match Types "PTR" and
"CNAME" the default delimiter SHALL be a hyphen "-". In any case the
default delimiter MAY be overridden by including it in the
backreference braces after the set selectors and a backreference field
separator character, the pipe "|".  An example would be "${<spanx style="emph">|-}" which
would force a hyphen "-" delimiter.  An empty or null delimiter is
allowed by not specifying a delimiter character, for example "${</spanx>|}",
which would simply concatenate all captured values in order of capture
position.  Position is described in detail in a later section.</t>

</section>
<section anchor="backreference-delimiter-interval" title="Backreference delimiter interval">

<t>The default behavior of a backreference set is to combine each
captured value specified with a delimiter between each.  To allow
captured backreferences to be delimited at another interval a third
backreference field is provided.  An example would be "${*|-|4}" which
would concatenate all captured values but delimiting only every fourth
value with hyphens "-".  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or null
value MUST be interpreted as "1" or every captured value.</t>

</section>
<section anchor="backreference-padding-length" title="Backreference padding length">

<t>When generating BULK based records a common requirement is to convert
from one numeric format to another, padding is among the most common
of these.  The fourth and final backreference field determines what
width to pad to.  An example would be "${<spanx style="emph">|||4}" which would set the
width of all captured values to 4 by inserting leading zeros to fill
the void.  The default is empty or null which MUST be interpreted as
NO modification.  A width of zero "0" has a special interpretation
referred to as "unpad" meaning all leading zeros MUST be removed.  If
a value is provided captured values longer than this width MUST be
truncated to fit the specified width.  In the case where a delimiter
interval is provided captured values between the intervals will be
concatenated and the padding or unpadding applied as a unit and not
individually.  An example of this would be "${</spanx>||4|4}" which would
combine each range of 4 captured values and pad them to a width of 4
characters by inserting leading zeros where necessary.</t>

</section>
<section anchor="backreference-position" title="Backreference Position">

<t>Great effort has gone into providing zone maintainers an intuitive
syntax.  As part of this effort, the captured values will reverse
direction depending on several factors.</t>

<t>As a general rule of thumb, if it makes sense the numeric ranges are
in reverse order from query to answer then they will be
reversed. Otherwise they will be in the same order.</t>

<t>Take for example a simple reverse DNS lookup, from "10.2.3.4" to
"pool-A-3-4.example.com.".  Since DNS zones are arranged according to
management authority the records appear reversed numerically. In this
example "10.2.3.4" becomes "4.3.2.10.in-addr.arpa.". One would
intuitively expect this reversal to be reversed so positional indices
of captured values would increment toward the right of the Replacement
Pattern.  This expectation is especially important when using range
based replacements.</t>

<t>Formally, the rules for position reversal are as follows:</t>

<t>Match Type RRs for "PTR" are reversed for zone owners ending in either
".in-addr.arpa." or "ip6.arpa.".  All other Match Type RRs for "PTR"
are forward.</t>

<t>Match Type RRs for "A" (Address), "AAAA" (IPv6 Address) and "CNAME"
(Canonical Name) are forward.</t>

</section>
<section anchor="backreference-position-negation" title="Backreference Position Negation">

<t>To allow simple reversal of any backreference notation a single
exclamation point character "!" MAY be used as the first character of
a backreference set.  Examples would be "${!*}" and "${!1-4,7}". In
both of the examples the backreference positions SHALL be the exact
mirror equivalent as those without the leading exclamation point "!".
This can be very important if the BULK generated replacements have
values in positions opposite to what is required or expected.</t>

</section>
</section>
</section>
<section anchor="replacement-pattern-examples" title="Replacement Pattern examples">

<t>This section provides examples of several BULK RR Replacement
Patterns.  Each example is intended to further understanding for
implementers and DNS administrators alike.</t>

<t>EXAMPLE 1 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
    - 86400 IN BULK PTR - pool-${*}.example.com.
]]></artwork></figure>

<t>This example contains several of the features described above.</t>

<t>First, the record owner is simply a single hyphen "-" denoting it is a
"hidden wildcard" (wildcard for generated records but not for BULK).</t>

<t>Second, the Domain Name Pattern is also a single hyphen "-" denoting
all queries matching the owner's wildcard pattern for the "PTR" Match
Type are accepted and will be captured for use in the Replacement
Pattern.</t>

<t>Third, the Replacement Pattern contains a single "star" backreference
denoting all captured numeric (decimal) backreferences will be
combined with its default delimiter of hyphen "-" (for PTR) and placed
into the backreference's position in the answer-set.  Should this
generate an invalid hostname the response will be NXDOMAIN unless
other BULK records match and are successfully generated without error.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" then reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-10-2-3-4.example.com.".</t>

<t>EXAMPLE 2 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
- 86400 IN BULK PTR - pool-${*|||3}.example.com.
]]></artwork></figure>

<t>This example expands on EXAMPLE 1 with the differences outlined below.</t>

<t>The only change to the BULK RR is the Replacement Pattern includes
additional fields, specifically null values for delimiter and interval
and a padding width of 3.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" and reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-010002003004.example.com.".</t>

<t>EXAMPLE 3 This example contains a classless IPv4 delegation on the /22
CIDR boundary as defined by <xref target="RFC2317"/>.  The network for this example
is</t>

<t>"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME \[0-255].\[0-3] ${*|.}.0-3
]]></artwork></figure>

<t>For this example, the query would come in for
"25.2.2.10.in-addr.arpa.".  After matching the owner filter (ending in
".2.10.in-addr.arpa.") and the fully qualified domain name pattern of
"[0-255].[0-3].2.10.in-addr.arpa." the answer-set would include a
generated RR consisting of captured values "25" and "2" joined by the
custom delimiter of period "." then joined by ".0-3" and made fully
qualified.  The resulting RR would be a "CNAME" with RDATA of
"25.2.0-3.2.10.in-addr.arpa.".  This record is now one delegated to
"ns1.sub.example.com." as its authority and the answer-set is
complete.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field-1" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets in verification (validation) nameservers for signatures generated based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME \[0-255].\[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-\[0-10]-\[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with bind's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document; BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of:</t>

<t>Robert Whelton (CenturyLink, Inc.)</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC2536;
&RFC2931;
&RFC3110;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;
<reference anchor="us-ascii" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
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

-->

</rfc>

