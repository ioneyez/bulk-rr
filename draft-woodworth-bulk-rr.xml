<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-06" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="July"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records based on numeric substrings of query
names.  The intent of BULK is to simplify generic assignments in a
memory-efficient way that can be easily shared between the primary and
secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern of variable numeric substrings.  It is
also akin to the $GENERATE master file directive <xref target="bind-arm"/> without
being limited to numeric values and without creating all possible
records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit
                      ; constrained to 65535 maximum.

hexnum        =  1*hexdigit
                      ; constrained to ffff maximum.

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>[ Should [] and &lt;&gt; be allowed as short for [0-255] and &lt;00-ff&gt;? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the RDATA length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

<t>[ Should there be a defined limit on the number of references?  Even
every hex character of an IPv6 address is only 32 references, and
knowing a reasonable maximum can possibly simplify implementations. ]</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding whitespace and
other special characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
text rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<t>By only triggering the BULK algorithm when the query name does not
exist, administrators are given the flexibility to explicitly override
the behaviour of specific names that would otherwise match the BULK
record's Domain Name Pattern.  This is unlike BIND's $GENERATE
directive, which adds the generated RRs to any existing names.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate RDATA format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response.</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The Numeric Pattern Normalization (NPN) resource record provides
pre-processing information to reduce the number of possible variants
that can be generated by a BULK RR into one signable record.  By
identifying parts of the dynamic resource record which should be
ignored or represented as a static value, one exemplar record and
signature is used to validate all other records that match the
pattern.</t>

<t>For example, a pattern replacement like pool-A-${1}-${2}.example.com
that generates PTR records for pool-A-0-0.example.com through
pool-A-255-255.example.com would have an NPN record that signals a
validating resolver to verify all pool-A-#-#.example.com names against
a record for pool-A-9-9.example.com.</t>

<t>Though it is imperfect in that forged records could be validated as
legitimate, it is nevertheless an improvement over the security
afforded by non-DNSSEC DNS.</t>

<t>The Type value for the NPN RR type is TBD.</t>

<t>The NPN RR is class independent and has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for an NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type indicates the type of the RRset with which this record is
associated.</t>

<t>Flags defines additional processing parameters for data normalization.
This document defines only the Period-As-Number flag "." (position 5),
the Hyphen-As-Number "-" (position 6) and the hexadecimal flag "X"
(position 7).  All other flags are reserved for future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+

Bits 0-4: Reserved for future

Bit    5: Period As Number (.) Flag
   If 0, periods are treated as non-digits.
   If 1, periods will be processed as digits.

Bit    6: Hyphen As Number (-) Flag
   If 0, hyphens are treated as non-digits.
   If 1, hyphens will be processed as digits.

Bit    7: Hexadecimal (X) Flag
   If 0, numeric digits include only 0-9.
   If 1, numeric digits include a-f in addition to 0-9.
]]></artwork></figure>

<t>Owner Ignore defines the number of octets in the owner name, as
counted from the left, which MUST be ignored by the normalization
process.  This field offers additional security to pattern based
signatures which may not be immediately apparent.  By restricting the
leftmost characters defined by this value, ultimately the length of
the generated portion of the accompanying BULK RR will be confined
accordingly.</t>

<t>Left Ignore defines the number of octets of the generated RDATA, as
counted from the left, which MUST be ignored by the normalization
process.</t>

<t>Right Ignore defines the number of octets of the generated RDATA, as
counted from the right, which MUST be ignored by the normalization
process.</t>

</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Flags is a string of characters indicating the status of each bit as
per the following table.  The characters can appear in any order.</t>

<figure><artwork><![CDATA[
+------------------+-----------+-----------+
|       Flag       |   Unset   |    Set    |
+------------------+-----------+-----------+
| Period As Number |           |     .     |
+------------------+-----------+-----------+
| Hyphen As Number |           |     -     |
+------------------+-----------+-----------+
|   Hexadecimal    |     9     |     f     |
+------------------+-----------+-----------+
]]></artwork></figure>

<t>Owner Ignore, Left Ignore, and Right Ignore are displayed as unsigned
decimal integers, ranging from 0 through 255.</t>

</section>
<section anchor="use-and-normalization-processing-of-npn-rrs" title="Use and Normalization Processing of NPN RRs">

<t>[ This section needs reworking still, and should perhaps be pulled
out into a separate document.  Notably one of issues that is not
really described well is that, as designed so far, at signing time the
NPN record has to be associated with the matching BULK record, which
is slightly problematic with regard to the idea that NPNs are
suggested to be extended to be used in the future with other
patterns-based record generation.  Once the appropriate BULK record is
selected, the signer would then have to understand its semantics to
fake up the exemplar to sign &#8211; raising the question as to why it
doesn't also know the appropriate values for the Ignore fields, since
it will have to understand what the static and variable parts are.</t>

<t>One way around all this is to just sign the BULK record itself and return
it in the additional section along with the answer, so that the
resolver could validate not only a signature but the resulting record
based on the substitution algorithm.  It'd still be problematic for
older DNSSEC validators that don't grok BULK, but no more so than not
grokking NPN. Unfortunately to them in both cases the type-appropriate
answer itself will be unsigned and thus fail validation. ]</t>

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t><list style="symbols">
  <t>For RR's Owner field, characters from the beginning to the index of
the Owner Ignore value or the final string of characters belonging to
the zone's ORIGIN MUST NOT be modified by this algorithm.  While the
Owner Ignore value is not used for BULK records but is included with
the expectation other pattern-based resource records may emerge and
leverage NPN records for their DNSSEC support requirements.</t>
  <t>For RR's RDATA field, character from beginning to the index of Left
Ignore value or characters with index of Right Ignore value to the end
MUST NOT be modified by this algorithm.</t>
  <t>In the remaining portion of both Owner and RDATA strings of numeric
data, defined as character "0" through "f" or "0" through "9"
depending on whether or not the Hexadecimal flag is set or not, MUST
be consolidated to a single character and set to the highest value
defined by the Hexadecimal flag.  Examples may be found in the
following section.  If period-as-number or hyphen-as-number flags are
set whichever are used ("." or "-") would be treated as part of the
number and consolidated where appropriate.</t>
</list></t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
of the NPN processing required for the verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC-compatible RRset, including BULK generated ones.</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in validating nameservers for signatures generated based on NPN
normalization.</t>

</section>
</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record could be used to support other dynamic RR
types which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="unsupported-nameservers" title="Unsupported Nameservers">

<t>Authoritative nameservers that do not understand the semantics of the
new record type will not be able to deliver the intended answers even
when the type appears in their zone data This significantly affects
the interoperability of primary versus secondary authorities that are
not all running the same software.  Adding new RRs which affect
handling by authoritative servers, or being unable to add them, is an
issue that needs to be explored more thoroughly within dnsop.</t>

<t>On the resolver side, rolling out a new semantics in DNSSEC has also
proven to be difficult in the past.  Lacking NPN support effectively
means that operators using BULK will have to forego DNSSEC signing of
the affected zones, or do online signing of the dynamically generated
records.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide validation for DNS resource records.
In a nutshell this requires each (owner, class, type) tuple to have
its own signature.  This essentially defeats the purpose of providing
large generated blocks of RRs in a single RR as each generated RR
would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-signatures" title="On-the-fly Signatures">

<t>This solution requires authoritative nameservers to sign generated
records as they are created.  Not all authoritative nameserver
implementations offer on-the-fly signatures, and even with those that
do not all operators will want to keep signing keys online, so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to validating resolvers is required to support this
solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN-Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
additional DNSSEC-aware resolver support.</t>

<t>It has been pointed out that due to this limitation, creation of
DNSSEC-signed BULK RRs requiring NPN support SHOULD be formally
discouraged until such time a respectable percentage (&gt;80%) of
validating resolvers in-the-wild possess NPN processing capabilities.
Until that time, on-the-fly signing and unsigned records offer the
intended capabilities of the BULK specification, while requiring zero
new features to support RR resolution. The authors would like to
encourage opening this door for pattern based technologies such as NPN
records as a solution to BULK RRs as well as other pattern based RRs
to come. Given enough time, enough nameservers will be patched and
upgraded for unrelated reasons and by means of simple attrition can
supply a level of inertia and eventually widespread adoption can be
assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief that while
any logic which limits the input of digital signatures lessens the
validity of those signatures, the limitation is minimal and the gain
is significant.  The main reason for this is as a general rule, RRs
used in a generic manner such as conventional $GENERATE RRs or
scripted mass pattern generated RRs have a lesser importance than
other RRs in managed zones.  These therefore inherently pose less risk
by means of attack and have a much less reward by defeating security
measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-validator-details" title="DNSSEC Validator Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification using NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended, as this would
only result in a shift of the attack target, a balance will need to be
found.  While this document uses 24 hours (86400 seconds) in its
examples, values between 300 to 900 seconds are likely more
appropriate and is RECOMMENDED.  What is ultimately deemed appropriate
may differ from zone to zone and administrator to administrator.</t>

<t>[ I am unclear how this helps DDOS mitigation against anyone at all. ]</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large-Scale DNS Records">

<t>The production of such large-scale records in the wild may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the magnitude problem for BULK generated RRs are expected
be similar if not identical to that of existing wildcard records, the
core difference being the resultant RDATA will be unique for each
requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, negative_side-effects produced by implementing the
features described in this document can be eliminated from any such
service or product.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>Neither the BULK nor NPN records introduce any new privacy concerns to
DNS data.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>
<section anchor="npn-examples" title="NPN Examples">

<section anchor="example-1-1" title="EXAMPLE 1">

<figure><artwork><![CDATA[
2.10.in-addr.arpa. 86400 IN BULK PTR (
                                 [0-255].[0-10].2.10.in-addr.arpa.
                                 pool-A-${1}-${2}.example.com.
                            )
2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>A query for the PTR of address 10.2.3.44 would match As shown
previously in BULK RR examples the query would match the BULK record
for the query name 44.3.2.10.in-addr.arpa, generating a PTR to
pool-A-3-44.example.com as the answer.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
  0 1 2 3 4 5 6 7
                v---------
    p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                 ---------^
                          1 1 1 1                  
                          3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact, as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag 9, and each run of digits replaced by the single character
"9".  The final Normalized RDATA for *.2.10.in-addr.arpa would
therefore become pool-A-9-9.example.com., and its signature would be
based on this value to cover all possible permutations of the
pool-A-${1}-${2}.example.com replacement pattern.</t>

<t>Since the validating nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single signature.</t>

</section>
<section anchor="example-2-1" title="EXAMPLE 2">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
    86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
    86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
       0
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
                 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
                 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for digits
from 0 through 9 as indicated by the NPN record's hexadecimal flag
"9", with each run replaced by the single character "9".  The final
normalized RDATA would therefore become 9.9.0-3.2.10.in-addr.arpa
and its signature would be based on this normalized RDATA field.
This new normalized string would be used as an RDATA for the
wildcard label of 2.10.in-addr.arpa now encompassing all
possible permutations of the ${*|.}.0-3.2.10.in-addr.arpa. pattern.</t>

<t>As in example 1, the validatating resolver would use the same NPN
record for comparison.</t>

</section>
<section anchor="example-3-1" title="EXAMPLE 3">

<t>This example provides reverse logic for example 1 by providing an IPv4
address record for a requested hostname.  For this example the query is
defined as an A record for pool-A-3-44.example.com, with an origin
of example.com.  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
                                                0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For A and AAAA records this means the "Ignore" fields are based
on zero padded data.  In this example our generated record MUST be
converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become 10.2.9.9 and
its signature would be based on this normalized RDATA field. This
new normalized A RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the 10.2.${</spanx>} pattern.</t>

</section>
<section anchor="example-4" title="EXAMPLE 4">

<t>This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an AAAA record for
pool-A-ff-aa.example.com with an origin of example.com..  RRs for this
example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                )
example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For A and AAAA records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of *.example.com now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
ngAA

-->

</rfc>

