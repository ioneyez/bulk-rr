<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records.  The intent of BULK is to simplify
generic assignments in a memory-efficient way that can be easily
shared between the primary and secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern.  It is also akin to the $GENERATE
master file directive <xref target="bind-arm"/> without being limited to numeric
values and without creating all possible records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit

hexnum        =  1*hexdigit

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>[ Should [] and &lt;&gt; be allowed as short for [0-255] and &lt;00-ff&gt;? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the rdata length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding special and
non-printing characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, any relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in verification (validation) nameservers for signatures generated
based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       [0-255].[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with BIND's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIACKZV1kAA+19+3cbR7Le7/1X9IGdY9IBIPAhyZJ97aUkyua9EqWQ8tp7
LUVnADTIuQRmcGcGpLiW8renvqrqxwzBh+VNNicJtStTwEw/6/FVdVX1YDAw
Td7M3WP75OcX/2afHR7bI1eXq2ri6JdJWU1rk43HlTvXJ46OzLScFNmCXplW
2awZXJTl9KKsmtPBeDU/G1TVYHTfTLOGHtgebT0cjLYHW/eNyZfVY9tUq7rZ
Ho0ejbZNVrnssT0oGlcVrjEXJ4/R/avX9peyOsuLE/tjVa6W5uwiPjR4hh7N
JGse27qZmtUS/dTU0c7om77dHe3s8N+7/Pd9U47rcu7kie1tYybllBp+bFf1
IKsneW6W+WNj7cA25YT/W18uKjer5XeaE//DZKvmtKz4Sfq/tXlBDf7rkAaq
M+dPZU3+tTwtOl+UFXX51BXNqrp8kRdnfZrPZMhf1dSDo8nsbt8f2UP7PMur
WfbBPqv420neXD62e9WcBt2UhXxWTqmXv+5hQqMd/WhVNBU9+fPxHn/gFlk+
l6EMw1D+koxgOCkXpj2dZ0P7JJvP3UUyl2cuK9JP7zCR7Z379+2zFb1S26cl
7Vlln8zPp3173Dgih5HdGY2Suf1E2zq9MjOimq0bZ4aBDWVgt0zrmKaVF9j1
rMjO3Ty3R9nJaXaeFck8j0+z+vQia05vfJZn/9Pq5JSmdugaWtQze3xZN25R
t5Zgi0b/0O5/WM7LKmvysrAvssIlk/7RVYusaMqLdN4vn9G8v3n44MZ5136g
w3FroJWO8y+nPLy12/t0SOO4qFwxcekWZ+f51D5tf8Uz3TvLqFP7xk1Oi3Je
nuSuM02i2CdVmU0vsstkck+zxbjKpycundueHW1v7ZIcGN3fvXGCTTZ3f8m4
Z5lEUdJaNfm5A/dVs8kWMXf89b7+ur219Sj8+s2W/5WEQvh166H+unP/kf8V
8iL+uht/9e3e38anJi9mnWE8fCgdYhsGWbV4zJPwkvTg8Jl9RORfzPKTldLA
kZu5uMJRooT19jLO0xTehwjKVwt+LEhUIZEmq06wDadNs6wf37s3a5bDvJ4M
qa179N97GNmje5NVde/R8NE9Etn3aJj3npw/2jt6OTxtFnNjBoOBzca0n9mk
MebNqYs6oPI6oGIdYJvLpbNTN8sLIv7MLhwNf2rLmV1mDYY9GGe1m5oJiXSe
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
Bvnrs1cv9w40J+owrX+cXO2VzC8pQkzswpGwvO6+7Jrp9tJqKPAOYluRausX
iDZX66n1TfDXoVG3TK6JxMZIebZaUy7c1N8g6cPkCLxkpuabMeNySPypKD4f
b613B34FIy53M81gKWidG0PUf+FIDciTdTbhIwqsKEoB55Oz5Lgh3E6J7smQ
xD15LYlAIyXZJ2tx7lDebQERwBPRm9KCvgxdqXhJuAWbkOn1KLTIZnI5mfNR
hsY9dzcp3qQZY6rnl/2kSWSMaZa0v6ENDW3kQze0e78+P9oMoiDOQepTiX+E
AwecFvOtFxL9au89epBMiOudcti1KG7PxmVS/cdwmiw4Si7mDBMJvTCZ33uw
y90vktvreJW4Otw8b5o5K2p6UzmbbJC9qZYoS4j7ABeITjyficBkyMRVuQrr
PZALqS50bZXwuq+vwZggeQVE1GWcClnrNd7bmGScFif31M1DUCeKv4d0QpYt
WI65gP99Xt3r+mcPkE+F9HtoWMtpqVxdSV+b3L/Hy1aU6WjtRjbXUsveprCr
wjdeORLjRTcm2dtanky0N4QphzTFC4CEJS66o3XVvdDNb8+LcRZoKIa2hvZD
IkFxnov/j8sfcKWNsmhNjQA0LgU3OpahlZifq4POQmEiCDCkKaGJHDW6iLfZ
q2RaxmTMZ1gVU+qKzJopp4WBiRDcDn0mWXwMOTl9JcwZWSsVkL6bag1y2EO8
vhoe72+g5UqOldloLc+mppEDeqkobJGaGj5e7SItBFlRZsMTmzTg8VioAQmb
j8tMeYHK6ujY11p4quklQSldlKqDQjmGSesR0WntC+c6urPvb1vkYPtnr45R
ipN2jfh4wrU1SUQg44uJW0FfyBAJ+UzG5zcKr2uTMZv2mH10fBu17+9CEssF
NCZZJdcfQWMa9HK3oFctDoKM7MGmPnWcn50HWVyLQbeRpr/2DfTcpm1WS2Eo
X1SNq5LFqC7dnvSSWFL9RFeSFrtcVctSiojGQ2oWhWmEWYDMmsYU8DHHUhse
XeoOVf7S4YdREWrOpc4FPXN88GMsOnTQ2YuYa1pzGuM8VCZlF3VeE9pWoKQb
arSyXs3VIF9p5ZCl3mic3KgbzAwGdMAMcienIapehZQNTQbqPDlDSUToHImD
fxVb3XjBLBWoJcAt32jYyutlL19FfVKsEVfvs/o93Frvafbvw9fv5VIFSRK5
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

-->

</rfc>

