<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC2536 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2536.xml">
<!ENTITY RFC2931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records.  The intent of BULK is to simplify
generic assignments in a memory-efficient way that can be easily
shared between the primary and secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/serve-stale&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern.  It is also akin to the $GENERATE
master file directive (FIXME insert ref to ISC Bv9ARM.ch06.html),
without being limited to numeric values and without creating all
possible records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
*.example.com. 86400 IN BULK A (
                         pool-A-[0-255]-[0-255].example.com.
                         10.55.${1}.${2}
                     )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<t>Traditional wildcard substitution logic is extended to allow</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>The reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
domain name relative to the zone in which it appears.  Special
characters are interpreted as per the following Augmented Backus-Naur
Form notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
DIGIT          =  %x30-39
                       ; 0-9
HEXDIG         =  DIGIT / 0x41-0x46 / 0x61-66
                       ; 0-9, A-F, a-f
DQUOTE         =  %x22
                       ; " (Double Quote)

pattern        =  "-" / 1*part / DQUOTE 1*part DQUOTE

part           =  "\[" range "]" / string

range          =  number [ "-" number ]

number         =  1*DIGIT / 1*HEXDIG

octet          =  %x00-FF

ctext          =  <any octet excepting "\">

quoted-char    = "\" octet
                       ; to allow [ and ] as literals

string         =  *(ctext / quoted-pair)

]]></artwork></figure>

<t>[ Why does DQUOTE need to be a syntactic element?  What function is
it serving? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>[ I admit this flexibility for strings might be a mistake, and will be
calling it out in dnsop specifically for discussion. ]</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It uses this format:</t>

<t>[ Presumably this could just build on the above but use a different
name for part and string (if string ends up being different, which it
probably shouldn't)?  There's a lot of redundancy with identical
definitions for six other elements, and it is easier for both
readers and implementers not to have to keep in mind that the same
identifier name, from the same source, has two different definitions ]</t>

<figure><artwork><![CDATA[
    DIGIT  = <as defined in RFC 5234 Appendix B.1>
    HEXDIG = <as defined in RFC 5234 Appendix B.1>
    DQUOTE = <as defined in RFC 5234 Appendix B.1>

    pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

    part                =   reference / string

    reference       =   "$" "{" substitution "}"

    substitution        =   range 0*( "," range ) [ options ]

    substitution        =/  "*" [ options ]

    options             =   delimiter [ interval [ padding ] ]

    delimiter           =   "|" 0*1( %x01-23 / %x25-7A / %7E-7F )
                               ; Any single [US-ASCII] character
                               ; excluding NUL, dollar sign "$",
                               ; pipe "|" and curly brace characters
                               ; "{" or "}"

    interval            =   "|" *2DIGIT

    padding             =   "|" *2DIGIT

    range               =   number [ "-" number ]

    number              =   1*DIGIT / 1*HEXDIG

    string              =   1*( %x01-23 / %x25-7A / %x7C / %7E-7F )
                               ; Any [US-ASCII] character excluding
                               ; NUL, dollar sign "$" and curly brace
                               ; characters "{" or "}"
]]></artwork></figure>

<t>The dollar sign, "$", and curly brace characters, "{" and "}", are
reserved to enclose regular-expression-esque references and MUST
NOT appear anywhere outside of such a reference specification.
This rigidity is necessary to simplify implementation of this document
and may relax once adoption reaches an acceptable level and demand for
such an exception exists.  The authors feel this limitation is a
reasonable limitation for the flexibility offered by this document.</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per RFC 1035 rules. [ FIXME: Find better reference, if any. ]</t>

<t>Replacement Pattern is represented as with the TXT RR type described
in <xref target="RFC1035"/>, Section 3.3.14.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
standard master file parenthetical line continuation, per <xref target="RFC1035"/>
Section 5.1, starting after Match Type and ending after Replacement
Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have an explicitly matching name, it then looks for a covering
wildcard as per <xref target="RFC1035"/>FIXME.  It then selects all BULK RRs with a
Match Type that matches the query type and a Domain Name Pattern that
matches the query name.  Note that query type ANY will select all
Match Types, and all query types match a CNAME [ and DNAME? ] Match
Type.  One or more answer RRs will be generated per the replacement
rules below.</t>

<t>[ I don't really grok hidden wildcards myself and have <spanx style="emph">currently</spanx>
elided discussion of them, to be possibly added back depending on our
conference call. &#8211; tale ]</t>

<section anchor="matching-the-bulk-domain-name-pattern-field" title="Matching the BULK &quot;Domain Name Pattern&quot; field">

<t>Simple name matching is determined by use of a single hyphen, "-", as
the value for the Domain Name Pattern.  This assumes everything
matches, and all hexadecimal or decimal fields will be captured for
use as references in the Replacement Pattern as described below.
Simple matching by the solitary hyphen is often preferred for large
blocks such as the reverse IPv6 address space for the simplicity of
record management.</t>

<t>Advanced name matching, while more complex, is designed to be both
simple to implement and simple to use.  Below is an example
implementation for label matching using a combination of parsing by
regular expression and matching of numeric ranges.</t>

<t>Numeric ranges are either decimal or hexadecimal, as determined by
conditions of the query. [ I appreciate where you're going with this
to trying to be more intuitive for zone maintainers, but wonder
whether this hasn't increased implementation complexity for only
minimal benefit.  Especially so with the automatic reference direction
described later which is also trying to be intuitive. ]</t>

<t><list style="symbols">
  <t>If query type is A, ranges are set to decimal.</t>
  <t>If query type is AAAA, ranges are set to hexadecimal.</t>
  <t>If query type is PTR or Match Type is CNAME, the RR owner is used to
determine decimal or hexadecimal.</t>
</list></t>

<t>** If RR owner ends in ".ip6.arpa.", ranges are set to hexadecimal.</t>

<t>** If RR owner does not end in ".ip6.arpa.", ranges are set to decimal.</t>

<t>The square bracket characters, "[" and "]", are reserved to enclose a
range specification and MUST NOT appear anywhere outside of a range
specification.</t>

</section>
<section anchor="record-generation-using-the-bulk-replacement-pattern-field" title="Record Generation using the BULK &quot;Replacement Pattern&quot; field">

<t>Once it has been determined a query meets all criteria for a BULK
record generation the below rules are followed to process captured
numeric data and Replacement Pattern into RRs to apply to the
answer-set.</t>

<section anchor="replacement-pattern-references" title="Replacement Pattern References">

<t>Before a record may be generated data must be captured in the Domain
Name Pattern comparison step above.  Each provided numeric range is
assigned to a temporary buffer to be used in this step.  To make the
jobs' of zone administrators easier the order of these buffers will
change based on the Match Type and owner so they will default to feel
more natural or intuitive.  Captured patterns and references are
in the same vein as regular expressions and are intended to feel
"familiar".  This is described in further detail (with examples) in
the sections below.</t>

<section anchor="reference-notation" title="Reference Notation">

<t>BULK RRs use a dollar-sign "$" and curly braces "{" and "}" to enclose
references within the Replacement Pattern.  The following rules
are used to determine the final replacement string.</t>

<section anchor="simple-numeric-reference-replacement" title="Simple numeric reference replacement">

<t>The simplest form of reference notation is its numeric form.  In
this form only the reference number falls between the curly braces
"{" and "}".  An example is "${1}" which would be replaced by the
value in the first capture position.  Position is described in detail
in a later section.</t>

<t>Numeric reference replacement indices start with one "1" to
maintain consistency with regular expression references.</t>

</section>
<section anchor="star-reference-replacement" title="Star reference replacement">

<t>The next form of reference notation is its star (or asterisk "<spanx style="emph">")
form.  In this form only an asterisk falls between the curly braces
"{" and "}".  This form "${</spanx>}" would be replaced by all captured
values in order of ascending position delimited by its default
delimiter (described below).  Position is described in detail in a
later section.</t>

</section>
<section anchor="numeric-range-reference-replacement" title="Numeric range reference replacement">

<t>The next form of reference notation is the numeric range form. In
this form a range of numbers falls between the curly braces "{" and
"}".  An example of this is "${1-4}" which would be replaced by all
captured values within this range (1-4) in order of positions provided
delimited its default delimiter (described below).  To reverse the
order of positions in this example one could simply reverse the upper
and lower values to look like "${4-1}".  Position is described in
detail in a later section.</t>

</section>
<section anchor="numeric-set-reference-replacement" title="Numeric set reference replacement">

<t>The next form of reference notation is the numeric set form.  In
this form a set of numbers falls between the curly braces "{" and "}"
separated by commas.  An example of this is "${1,4}" which would be
replaced by the first and fourth captured values in the order of
position provided delimited its default delimiter (described below).
Position is described in detail in a later section.</t>

<t>This notation may be combined with the numeric range form allowing
specific positions or position ranges to be used.  Examples would be
"${3,2,1,4-8}" and "${8-12,1-4}".</t>

</section>
<section anchor="reference-delimiter" title="Reference delimiter">

<t>The above sections reference a default delimiter.  In an effort to
provide an intuitive zone management experience the default delimiter
will be based on the BULK RR's Match Type.  For Match Type "A" the
default delimiter SHALL be a period ".", for Match Type "AAAA" the
default delimiter SHALL be a colon ":" and for Match Types "PTR" and
"CNAME" the default delimiter SHALL be a hyphen "-". In any case the
default delimiter MAY be overridden by including it in the
reference braces after the set selectors and a reference field
separator character, the pipe "|".  An example would be "${<spanx style="emph">|-}" which
would force a hyphen "-" delimiter.  An empty or null delimiter is
allowed by not specifying a delimiter character, for example "${</spanx>|}",
which would simply concatenate all captured values in order of capture
position.  Position is described in detail in a later section.</t>

</section>
<section anchor="reference-delimiter-interval" title="Reference delimiter interval">

<t>The default behavior of a reference set is to combine each
captured value specified with a delimiter between each.  To allow
captured references to be delimited at another interval a third
reference field is provided.  An example would be "${*|-|4}" which
would concatenate all captured values but delimiting only every fourth
value with hyphens "-".  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or null
value MUST be interpreted as "1" or every captured value.</t>

</section>
<section anchor="reference-padding-length" title="Reference padding length">

<t>When generating BULK based records a common requirement is to convert
from one numeric format to another, padding is among the most common
of these.  The fourth and final reference field determines what
width to pad to.  An example would be "${<spanx style="emph">|||4}" which would set the
width of all captured values to 4 by inserting leading zeros to fill
the void.  The default is empty or null which MUST be interpreted as
NO modification.  A width of zero "0" has a special interpretation
referred to as "unpad" meaning all leading zeros MUST be removed.  If
a value is provided captured values longer than this width MUST be
truncated to fit the specified width.  In the case where a delimiter
interval is provided captured values between the intervals will be
concatenated and the padding or unpadding applied as a unit and not
individually.  An example of this would be "${</spanx>||4|4}" which would
combine each range of 4 captured values and pad them to a width of 4
characters by inserting leading zeros where necessary.</t>

</section>
<section anchor="reference-position" title="Reference Position">

<t>Great effort has gone into providing zone maintainers an intuitive
syntax.  As part of this effort, the captured values will reverse
direction depending on several factors.</t>

<t>As a general rule of thumb, if it makes sense the numeric ranges are
in reverse order from query to answer then they will be
reversed. Otherwise they will be in the same order.</t>

<t>Take for example a simple reverse DNS lookup, from "10.2.3.4" to
"pool-A-3-4.example.com.".  Since DNS zones are arranged according to
management authority the records appear reversed numerically. In this
example "10.2.3.4" becomes "4.3.2.10.in-addr.arpa.". One would
intuitively expect this reversal to be reversed so positional indices
of captured values would increment toward the right of the Replacement
Pattern.  This expectation is especially important when using range
based replacements.</t>

<t>Formally, the rules for position reversal are as follows:</t>

<t>Match Type RRs for "PTR" are reversed for zone owners ending in either
".in-addr.arpa." or "ip6.arpa.".  All other Match Type RRs for "PTR"
are forward.</t>

<t>Match Type RRs for "A" (Address), "AAAA" (IPv6 Address) and "CNAME"
(Canonical Name) are forward.</t>

</section>
<section anchor="reference-position-negation" title="Reference Position Negation">

<t>To allow simple reversal of any reference notation a single
exclamation point character "!" MAY be used as the first character of
a reference set.  Examples would be "${!*}" and "${!1-4,7}". In
both of the examples the reference positions SHALL be the exact
mirror equivalent as those without the leading exclamation point "!".
This can be very important if the BULK generated replacements have
values in positions opposite to what is required or expected.</t>

</section>
</section>
</section>
<section anchor="replacement-pattern-examples" title="Replacement Pattern examples">

<t>This section provides examples of several BULK RR Replacement
Patterns.  Each example is intended to further understanding for
implementers and DNS administrators alike.</t>

<t>EXAMPLE 1 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
    - 86400 IN BULK PTR - pool-${*}.example.com.
]]></artwork></figure>

<t>This example contains several of the features described above.</t>

<t>First, the record owner is simply a single hyphen "-" denoting it is a
"hidden wildcard" (wildcard for generated records but not for BULK).</t>

<t>Second, the Domain Name Pattern is also a single hyphen "-" denoting
all queries matching the owner's wildcard pattern for the "PTR" Match
Type are accepted and will be captured for use in the Replacement
Pattern.</t>

<t>Third, the Replacement Pattern contains a single "star" reference
denoting all captured numeric (decimal) references will be
combined with its default delimiter of hyphen "-" (for PTR) and placed
into the reference's position in the answer-set.  Should this
generate an invalid hostname the response will be NXDOMAIN unless
other BULK records match and are successfully generated without error.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching references for "4", "3", "2" and "10" then reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-10-2-3-4.example.com.".</t>

<t>EXAMPLE 2 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
- 86400 IN BULK PTR - pool-${*|||3}.example.com.
]]></artwork></figure>

<t>This example expands on EXAMPLE 1 with the differences outlined below.</t>

<t>The only change to the BULK RR is the Replacement Pattern includes
additional fields, specifically null values for delimiter and interval
and a padding width of 3.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching references for "4", "3", "2" and "10" and reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-010002003004.example.com.".</t>

<t>EXAMPLE 3 This example contains a classless IPv4 delegation on the /22
CIDR boundary as defined by <xref target="RFC2317"/>.  The network for this example
is</t>

<t>"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME \[0-255].\[0-3] ${*|.}.0-3
]]></artwork></figure>

<t>For this example, the query would come in for
"25.2.2.10.in-addr.arpa.".  After matching the owner filter (ending in
".2.10.in-addr.arpa.") and the fully qualified domain name pattern of
"[0-255].[0-3].2.10.in-addr.arpa." the answer-set would include a
generated RR consisting of captured values "25" and "2" joined by the
custom delimiter of period "." then joined by ".0-3" and made fully
qualified.  The resulting RR would be a "CNAME" with RDATA of
"25.2.0-3.2.10.in-addr.arpa.".  This record is now one delegated to
"ns1.sub.example.com." as its authority and the answer-set is
complete.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets in verification (validation) nameservers for signatures generated based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME \[0-255].\[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-\[0-10]-\[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with bind's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document; BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of:</t>

<t>Robert Whelton (CenturyLink, Inc.)</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC2536;
&RFC2931;
&RFC3110;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;
<reference anchor="us-ascii" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>


    </references>

    <references title='Informative References'>

&RFC7719;


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

