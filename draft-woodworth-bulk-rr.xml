<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records based on numeric substrings of query
names.  The intent of BULK is to simplify generic assignments in a
memory-efficient way that can be easily shared between the primary and
secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern of variable numeric substrings.  It is
also akin to the $GENERATE master file directive <xref target="bind-arm"/> without
being limited to numeric values and without creating all possible
records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit
                      ; constrained to 65535 maximum.

hexnum        =  1*hexdigit
                      ; constrained to ffff maximum.

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>[ Should [] and &lt;&gt; be allowed as short for [0-255] and &lt;00-ff&gt;? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the rdata length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding whitespace and
other special characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
text rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate rdata format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response.</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is TBD.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in verification (validation) nameservers for signatures generated
based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       [0-255].[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with BIND's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAHqlV1kAA+19+3cbR7Le7/1X9IGds6QDQOBLtmRf79ISZfNeiVJIee29
lqIzBBrkXAIzuDMDUlxL+dtTX1X1Y4YAScmbbE4SalemgJl+VNfjq+rq6sFg
YJq8mbnH9oefn/+bfXp0Yo9dXS6rsaNfxmU1qU12elq5S33i+NhMynGRzemV
SZVNm8FVWU6uyqo5H5wuZxeDqhqM9swka+iB7dHW14PR9mBrz5h8UT22TbWs
m+3R6NFo22SVyx7bw6JxVeEac3X2GN2/fGV/KauLvDizP1blcmEuruJDg6fo
0Yyz5rGtm4lZLtBPTR3tjL7p293Rzg7/vct/75nytC5nTp7Y3jZmXE6o4cd2
WQ+yepznZpE/NtYObFOO+b/19bxy01p+pznxP0y2bM7Lip+k/1ubF9Tgvw5p
oDpz/lRo8q/ledH5oqyoyyeuaJbV9fO8uOjTfMZD/qqmHhxNZnd7b2SP7LMs
r6bZe/u04m/HeXP92O5XMxp0UxbyWTmhXv66jwmNdvSjZdFU9OTPJ/v8gZtn
+UyGMgxD+UsyguG4nJv2dJ4O7Q/ZbOaukrk8dVmRfnqPiWzv7O3Zp0t6pbZP
Slqzyv4wu5z07UnjiB1Gdmc0Sub2Ey3r5MbMiGu2bp0ZBjaUgd0xrROaVl5g
1bMiu3Sz3B5nZ+fZZVYk8zw5z+rzq6w5v/VZnv1Py7NzmtqRa4ioF/bkum7c
vG6RYItG/7U9eL+YlVXW5GVhn2eFSyb9o6vmWdGUV+m8XzyleX/z9cNb5137
gQ5PWwOtdJx/OefhrVzeJ0Max1XlirFLlzi7zCf2Sfsrnun+RUad2tdufF6U
s/Isd51pEsf+UJXZ5Cq7Tib3JJufVvnkzKVz27ej7a1d0gOjvd1bJ9hkM/eX
jHuWSRQl0arJLx2kr5qOt0i44697+uv21taj8Os3W/5XUgrh162v9dedvUf+
V+iL+Otu/NW3u7eNT01eTDvD+Ppr6RDLMMiq+WOehNekh0dP7SNi/2Kany2V
B47d1EUKR40S6O11nOcpvA8VlC/n/FjQqMIiTVadYRnOm2ZRP37wYNoshnk9
HlJbD+i/DzCyRw/Gy+rBo+GjB6SyH9AwH/xw+Wj/+MXwvJnPjBkMBjY7pfXM
xo0xr89dtAGVtwEV2wDbXC+cnbhpXhDzZ3buaPgTW07tImsw7MFpVruJGZNK
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
Z2YHdp/+v0P/36U/Q+vse8Sx6PsZ/T60Y3pqbm/hytD8fw/PtGe2au43fsK7
D2kyuzQevDeiSX5Dk73zM+XrA2R/BlTt9xSYsWQBGYKKlwhYlY05BYw/deFd
oDTEOTkIr4m70bNsObTdHUfmIDlfFBL44CZyjEcin36TMLhlER4RS3Y3rQ2/
hUAN59gti24e/02vkN7wlU3gcJgkWKW7BixJcE2lEKMGi7zsPRo86ogeThSC
IImP5IUxmA/W+L0iiZYlcQSNUZnCXbWf0ZhNaG7pt22LJKFGMknlCKeRuidY
0VWqr0fye8UnfQkZiYlqFfMjqD5fSqil9j5l71Zt3AsH6mCyvUt5H6Ors1rq
aRRJxYATEBe8G4kUv5aGTsibi2/S2AEDO2V4XFqFh7OlMetTFyLFPhlceSOU
dQwLOIwGe1vxsLfWGueFeWZExM4gl++buJk7C+XkMKcH29v2yeHTY3OKuAHX
LG3temq1ta2vP35UlvSHYaZdkEDcIeZ/RI32fF8+9JFQtVfUW8N6edpeJWpe
a5CZVrMA0BFyeCDwpcb+bjKQGQ12ov3kn6MT/L2qVzOgL9rgQQ7YJqhg5y0n
zw4/Dul381X6AltneQG6fGS3vX3uQqh+OD0JxmcybQ8f7vW6ZjmlU0YEfbjH
T641xNx5TzaSO6ZYX6ZBr2zgn2uNMbTPtsb3THDzTfyBFDffxCoLDPM1pBeG
9CLMr/wO8za0uS3os8xO6E9F/87o7wX9HY1w1+auStD7BLN7Tyv7eZZXFuv/
W95bLO+j4aN1ksYbmn/M+Oo5vc+1vbEqcLS9b/5hxvfL39947biyyWh99zmo
6hX7Vv8zDDFrlxox0o4NjkY3sYw7bcMYAkX+7JF47tO42U7ycHqtz4k5Z8Np
sMuXdJb5E3PJoSPdtV/rN5vUby5sp8Xb3KaWH41IdG+N4bT3MJyDVuv3rmDc
+onljMlj9tWM7/Mi2z2cmr7Hw5vmqzVDZau7zwr7m6C+/rdZrtFoZzj6Y66k
EqP758Zb9zJSd/YVbddNFzL2M2I7NlJ7NmJ7NoJDefdc2u0nTuTds/wUA9US
5Uh5wFzU+F2UOWomnSLzJYlXf6tHhho9Z25au/vyMYfusAmAEz0IAlvJDJT6
xGwDfzk8PtDsAcTcuHy4CHwnASDuo9Bo5aRwixmTrZug/NOcAm35sGgLM45b
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
tOUNyKEAAA==

-->

</rfc>

