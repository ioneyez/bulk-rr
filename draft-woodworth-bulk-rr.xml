<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC2536 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2536.xml">
<!ENTITY RFC2931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Shashwath.Bindinganaveliraghavan@CenturyLink.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern based
creation of DNS resource records to be used in place of NXDOMAIN
errors which would normally be returned.  These records are currently
restricted to registered DNS resource record types A, AAAA, PTR and
CNAME.  The key benefit of the BULK resource record type is the
simplification of maintaining "generic" record assignments which would
otherwise be too many to manage or require scripts or proprietary
methods as bind's $GENERATE.</t>

<t>This document updates RFCs 2308, 4033, 4034 and 4035.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS Resource Record (BULK) defines a maskable pattern based
method for real-time on-the-fly resource record
generation. Specifically, it allows one to manage large blocks of DNS
records based entirely on record owner data in the RR query and
patterns (or templates) designed by knowledgeable zone
administrators. Existing DNS resource records covered by this document
are Address (A), IPv6 Address (AAAA), Pointer (PTR) and Canonical Name
(CNAME). Although other RR types are not explicitly forbidden from use
with BULK logic they fall outside of scope and will not be discussed
in this document.  This document defines the purpose of this new
resource record (BULK), its RDATA format, its presentation format
(ASCII representation) as well as generated responses to matched DNS
queries.</t>

<t>Two Key benefits of this record type are; a) the ability to transfer
BULK RR intentions from primary to secondary nameservers with minimal
bandwidth and memory requirements; and b) the ability to manage large
volumes of pattern based records such as an IPv6 /64 CIDR or larger in
a single entry.</t>

<t>Support options for DNSSEC related complications resulting from
dynamically generated records are also provided in this document.  One
such option is in the form of the Numeric Pattern Normalization (NPN)
resource record type also described in this document.  NPN resource
records provide a way of generating pattern based DNSSEC signatures
and securely performing DNSSEC validation on such signatures.</t>

<section anchor="background-and-related-documents" title="Background and Related Documents">

<t>This document assumes the reader is familiar with the basic DNS
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, and the subsequent
documents that update them, particularly <xref target="RFC2181"/> and <xref target="RFC2308"/>.</t>

<t>The reader is also assumed to be familiar with DNSSEC basics as
described in <xref target="RFC4033"/>, <xref target="RFC4034"/> and <xref target="RFC4035"/> as well as the DNS
cryptographic signature generation process described in <xref target="RFC4033"/>,
<xref target="RFC4034"/>, <xref target="RFC4035"/>, <xref target="RFC2536"/>, <xref target="RFC2931"/> and <xref target="RFC3110"/>.</t>

</section>
<section anchor="reserved-words" title="Reserved Words">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record consists of details which enable a DNS
nameserver to generate RRs of other types based upon query received
and patterns provided.  Unless otherwise stated the letters used in
hexadecimal numbers (a-f) MUST be case insensitive and are assumed to
be lowercase. All examples in this document using hexadecimal are
provided in lowercase.</t>

<t>The Type value for the BULK RR type is XX.</t>

<t>The BULK RR is class independent.</t>

<t>The BULK RR has no special TTL requirements but some security
guidelines are offered in a later section.</t>

<section anchor="bulk-optional-hidden-wildcards" title="BULK OPTIONAL Hidden Wildcards">

<t>The BULK RR extends current wildcard substitution logic as defined in
<xref target="RFC1034"/> by allowing a single hyphen "-" in the leftmost label to
represent the intent of leveraging a modified wildcard matching
mechanism.  If this condition exists wildcard logic SHALL be used for
generated replacement records but not for the BULK resource records
themselves.  This will become clearer in the "BULK Replacement"
section of this document.  If an asterisk "*" (the standard wildcard
character) is used default wildcard behavior MUST be used.</t>

</section>
<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR consists of a 2 octet Match Type Field, a
Domain Name Pattern Field and a Replacement Pattern Field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type Field">

<t>The Match Type field identifies the type of the RRset identified by
this BULK record.  This field consists of two octets corresponding to
an RR TYPE code as specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

</section>
<section anchor="the-domain-name-pattern-field" title="The Domain Name Pattern Field">

<t>The Domain Name Pattern Field consists of a text string which may be
evaluated by the sections below.  The character encoding for this
field is <xref target="us-ascii"></xref> and may not contain whitespace unless enclosed
within double-quote characters.  The value of a single hyphen "-" has
special implications and will be discussed in greater detail below.</t>

<t>The following syntax specification uses the Augmented Backus-Naur
Form (ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
      DIGIT  = <as defined in RFC 5234 Appendix B.1>
      HEXDIG = <as defined in RFC 5234 Appendix B.1>
      DQUOTE = <as defined in RFC 5234 Appendix B.1>

      pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

      part                =   "\[" range "]" / string

      range               =   number [ "-" number ]

      number              =   1*DIGIT / 1*HEXDIG

      string              =   1*( %x01-5A / %x5C / %x5E-7F )
                                 ; Any [US-ASCII] character excluding
                                 ; NUL and square bracket characters
                                 ; "\[" or "]"
]]></artwork></figure>

<t>Although allowed by <xref target="RFC2181"/>; the square bracket characters, "["
and "]", are reserved to enclose a range specification and MUST NOT
appear anywhere outside of a range specification.</t>

<section anchor="single-hyphen" title="Single hyphen">

<t>If the domain name pattern field consists of a single hyphen it is not
necessary to evaluate for numeric ranges or strings.  Implementors
SHOULD simply set a flag indicating all ranges matching the query's
label are true and backreferences (described in further detail in the
"BULK Replacement" section) will be automatically set.</t>

</section>
<section anchor="numeric-ranges" title="Numeric ranges">

<t>Numeric ranges include decimal or hexadecimal ranges depending on
which record type was used in the query.  This logic will be described
in further detail in the "Replacement Logic" section.</t>

<t>The numeric range pattern will be a range of allowed numbers lower and
upper values separated by a single hyphen "-".  If upper and lower
values are identical a single numeric value (without hyphen) will
suffice.  To easily distinguish numeric range patterns from string
values they MUST be enclosed within square brackets "[" and "]".</t>

</section>
<section anchor="string-values" title="String values">

<t>All values found before or after Numeric ranges (excluding
single-hyphen rule) are considered to be string values.  These values
will be taken literally when evaluating for pattern matches in the
"BULK Replacement" section below.</t>

</section>
</section>
<section anchor="the-replacement-pattern-field" title="The Replacement Pattern Field">

<t>The Replacement Pattern field describes how the answer RRset SHOULD be
generated for the matching query.  It can either be a single hyphen
"-" or a string containing backreferences (described in further detail
in the "BULK Replacement" section).  This field MUST be evaluated for
proper syntax for resource records of its Match Type defined above.  A
"read" evaluation MAY be performed when a zone is first committed to
memory either while converting from Text to Wire format (from stored
zone files) or when a RR transfer is received (raw Wire format).
Stage two "write" evaluations MUST be performed prior to returning
generated replacement answers.  Since logic to perform a stage two
evaluation is already a requirement for DNS nameservers it may be
easier for implementors to perform just stage two evaluations.
Stage-two-only evaluation may be also preferred for performance
purposes and is acceptable behavior.  Any stage two evaluation errors
MUST be processed as if the record did not exist and if all BULK
generated records for a query answer-set evaluate to errors the
original condition of an NXDOMAIN error state MUST be restored.</t>

<t>The following syntax specification uses the Augmented Backus-Naur Form
(ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
    DIGIT  = <as defined in RFC 5234 Appendix B.1>
    HEXDIG = <as defined in RFC 5234 Appendix B.1>
    DQUOTE = <as defined in RFC 5234 Appendix B.1>

    pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

    part                =   backreference / string

    backreference       =   "$" "{" substitution "}"

    substitution        =   range 0*( "," range ) [ options ]

    substitution        =/  "*" [ options ]

    options             =   delimiter [ interval [ padding ] ]

    delimiter           =   "|" 0*1( %x01-23 / %x25-7A / %7E-7F )
                               ; Any single [US-ASCII] character
                               ; excluding NUL, dollar sign "$",
                               ; pipe "|" and curly brace characters
                               ; "{" or "}"

    interval            =   "|" *2DIGIT

    padding             =   "|" *2DIGIT

    range               =   number [ "-" number ]

    number              =   1*DIGIT / 1*HEXDIG

    string              =   1*( %x01-23 / %x25-7A / %x7C / %7E-7F )
                               ; Any [US-ASCII] character excluding
                               ; NUL, dollar sign "$" and curly brace
                               ; characters "{" or "}"
]]></artwork></figure>

<t>The dollar sign, "$", and curly brace characters, "{" and "}", are
reserved to enclose regular-expression-esque backreferences and MUST
NOT appear anywhere outside of such a backreference specification.
This rigidity is necessary to simplify implementation of this document
and may relax once adoption reaches an acceptable level and demand for
such an exception exists.  The authors feel this limitation is a
reasonable limitation for the flexibility offered by this document.</t>

</section>
</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Domain Name Pattern and Replacement Pattern fields MUST be
presented as the TXT RR type described in <xref target="RFC1035"/>, Section 3.3.14.</t>

</section>
<section anchor="bulk-rr-examples" title="BULK RR Examples">

<t>EXAMPLE 1</t>

<t>The following BULK RR stores a block of A RRs for example.com.</t>

<figure><artwork><![CDATA[
*.example.com. 86400 IN BULK A (
                         pool-A-\[0-255]-\[0-255].example.com.
                         10.55.${1}.${2}
                     )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "A" indicates that this BULK RR defines the A record
type (Address).  Value "pool-A-[0-255]-[0-255].example.com." indicates
the Domain Name Pattern.  Value "10.55.${1}.${2}" indicates the
Replacement Pattern.  The owner in this example is a wildcard and
matches any query ending with the string right of the asterisk.</t>

<t>EXAMPLE 2</t>

<t>The following BULK RR stores the reverse block of PTR records for the
first example.</t>

<figure><artwork><![CDATA[
*.55.10.in-addr.arpa. 86400 IN BULK PTR (
                             \[0-255].\[0-255].55.10.in-addr.arpa.
                             pool-A-${1}-${2}.example.com.
                         )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "PTR" indicates that this BULK RR defines the PTR
record type (Pointer).  Value "[0-255].[0-255].55.10.in-addr.arpa."
indicates the Domain Name Pattern.  Value
"pool-A-${1}-${2}.example.com." indicates the Replacement Pattern.
The owner in this example is a wildcard and matches any query ending
with the string right of the asterisk.</t>

<t>Additional examples can be found in the "BULK Replacement" section.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>The BULK Record is designed to enable DNS zone maintainers to manage
large blocks of DNS RRs which all conform to a common pattern. The
Domain Name Pattern field provides both a tertiary filter (after owner
and type) and a definition of all numeric pattern ranges.</t>

<t>When a query is first received by a DNS nameserver it begins its job
of locating an answer-set.  In its simplest form this begins by
locating the query owner (or wildcard suffix), class and type then
returning any matching RR RDATA (or errors).</t>

<t>In the event no matches for the query are found the nameserver of
authority will return an error type defined as NXDOMAIN.  In the case
of a "BULK" enabled authoritative nameserver an additional step MUST
be performed.  The nameserver MUST query its local RR database for any
"BULK" RRs with a matching owner, class and compatible Match Type.  If
any such RRs are found the query's owner MUST then be matched against
the Domain Name Pattern and all matching BULK records MUST be placed
into a temporary processing answer-set.  This temporary processing
answer-set MUST then follow the Replacement Pattern for each matched
record and provided no errors are found SHALL then write this new
answer-set to the query's complete answer set.  Matching replacements
will be of the type specified in the Match Type field of the
corresponding BULK RR. Additional detail is provided in the following
sections.</t>

<section anchor="matching-bulk-owner-field" title="Matching BULK &quot;owner&quot; field">

<t>The owner field of all BULK records MUST be that of either a wildcard
or hidden wildcard as defined in previous sections.  While a hidden
wildcard will not be searched for BULK records it will be added to the
database for use with the corresponding type field of each BULK RR.
This allows location of BULK records to be less conspicuous to the
public while still leveraging logic already included in the nameserver
thus minimizing the complexity of implementation.</t>

<t>A query SHALL pass the first filter stage (owner match) ONLY IF: (1)
an NXDOMAIN is set as the query's current answer set AND (2) the
query's owner ends with the BULK record's owner field past the leading
hyphen "-" or asterisk "*".</t>

</section>
<section anchor="matching-the-bulk-match-type-field" title="Matching the BULK &quot;Match Type&quot; field">

<t>The RR type of the received query must be compatible with that of the
Match Type of owners matched in the section above.  That is to say a
query for an "A" record will only match BULK records with matching
owner and Match Types of "A" (or "CNAME").  All other BULK records
matching the query's owner are incompatible and MUST be ignored as
part of the selected answer set.</t>

</section>
<section anchor="matching-the-bulk-domain-name-pattern-field" title="Matching the BULK &quot;Domain Name Pattern&quot; field">

<t>Assuming the RR owner and Match Type fields match the next step is to
find compatible Domain Name Patterns.  The logic for this falls into
two categories; automatic and manual which are described in greater
detail in the following sections.</t>

<section anchor="automatic-domain-name-pattern-matching" title="Automatic Domain Name Pattern matching">

<t>Automatic Domain Name Pattern matching is determined by use of a
single hyphen "-" as the value for Domain Name Pattern field.  This
assumes everything matches and all hexadecimal or decimal fields will
be captured for use as backreferences in the Replacement Pattern
(described below).  Automatic Domain Name Pattern matching is often
preferred for large blocks such as the reverse IPv6 address space for
the simplicity of record management.</t>

</section>
<section anchor="manual-domain-name-pattern-matching" title="Manual Domain Name Pattern matching">

<t>Manual Domain Name Pattern matching, while more complex is designed to
be both simple to implement and simple to use.  Below is an example
implementation for label matching using a combination of parsing by
regular expression and matching of numeric ranges.</t>

<t>Domain Name Patterns evaluate to current zone ORIGIN as defined in
<xref target="RFC1034"/>, Section 3.  In short this means all Manual Domain Name
Patterns must be terminated with a period "." or are assumed relative
to the RR's origin.</t>

<t>Numeric Ranges are either decimal or hexadecimal as determined by
conditions of query.</t>

<t><list style="symbols">
  <t>If query type is "A" ranges are set to decimal.</t>
  <t>If query type is "AAAA" ranges are set to hexadecimal.</t>
  <t>If query type is PTR or CNAME the RR owner is used to determine
decimal or hexadecimal.</t>
</list></t>

<t>** If RR owner ends in ".ip6.arpa.", ranges are set to hexadecimal.</t>

<t>** If RR owner does not end in ".ip6.arpa.", ranges are set to decimal.</t>

<t>The square bracket characters, "[" and "]", are reserved to enclose a
range specification and MUST NOT appear anywhere outside of a range
specification.</t>

<section anchor="manual-domain-name-pattern-matching-examples" title="Manual Domain Name Pattern matching examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.4"
with an origin of "2.10.in-addr.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>[0-255].[0-10] == [0-255].[0-10].2.10.in-addr.arpa.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner != "*.ip6.arpa." so range is decimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
   \[0-255].\[0-10].2.10.in-addr.arpa. ==
        /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
   4.3.2.10.in-addr.arpa. =~
        /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>"4" is captured and within range 0-255 (decimal)
"3" is captured and within range 0-10 (decimal)</t>

<t>EXAMPLE 2</t>

<t>For this example the query is defined as a PTR record for "fc00::55"
with an origin of "0.0.c.f.ip6.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.0.0.c.f.ip6.arpa. 86400 IN BULK PTR (
                              -
                              pool-${1-16|}-${17-28|}.example.com.
                          )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<figure><artwork><![CDATA[
   - == \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].   ~~
        \[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa.
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>Since Hyphen invokes "Automatic Domain Name Pattern" matching, all
fields are captured for future use as backreferences.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner == "*.ip6.arpa." so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].          ~~
\[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa. ==
               /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
5.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.                            ~~
0.0.0.0.0.0.0.0.0.0.0.0.0.0.c.f.ip6.arpa.
            =~ /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>"5" is captured and within range 0-f (hexadecimal)
"5" is captured and within range 0-f (hexadecimal)
&#8230;
"0" is captured and within range 0-f (hexadecimal)
"0" is captured and within range 0-f (hexadecimal)</t>

<t>EXAMPLE 3
For this example the query is defined as an "AAAA" record for "pool-A-ff-aa.example.com." with an origin of "example.com." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>pool-A-[0-ffff]-[0-ffff] == pool-A-[0-ffff]-[0-ffff].example.com.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "AAAA" so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
pool-A-\[0-ffff]-\[0-ffff].example.com. ==
     /^pool-A(-(\[0-9a-fA-F]{1,4})){2}\.example\.com\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
pool-A-ff-aa.example.com. =~
  /^pool-A-(\[0-9a-fA-F]{1,4})-(\[0-9a-fA-F]{1,4})\.example\.com\.$/
]]></artwork></figure>

<t>"ff" is captured and within range 0-ffff (hexadecimal)
"aa" is captured and within range 0-ffff (hexadecimal)</t>

</section>
</section>
</section>
<section anchor="record-generation-using-the-bulk-replacement-pattern-field" title="Record Generation using the BULK &quot;Replacement Pattern&quot; field">

<t>Once it has been determined a query meets all criteria for a BULK
record generation the below rules are followed to process captured
numeric data and Replacement Pattern into RRs to apply to the
answer-set.</t>

<section anchor="replacement-pattern-backreferences" title="Replacement Pattern Backreferences">

<t>Before a record may be generated data must be captured in the Domain
Name Pattern comparison step above.  Each provided numeric range is
assigned to a temporary buffer to be used in this step.  To make the
jobs' of zone administrators easier the order of these buffers will
change based on the Match Type and owner so they will default to feel
more natural or intuitive.  Captured patterns and backreferences are
in the same vein as regular expressions and are intended to feel
"familiar".  This is described in further detail (with examples) in
the sections below.</t>

<section anchor="backreference-notation" title="Backreference Notation">

<t>BULK RRs use a dollar-sign "$" and curly braces "{" and "}" to enclose
backreferences within the Replacement Pattern.  The following rules
are used to determine the final replacement string.</t>

<section anchor="simple-numeric-backreference-replacement" title="Simple numeric backreference replacement">

<t>The simplest form of backreference notation is its numeric form.  In
this form only the backreference number falls between the curly braces
"{" and "}".  An example is "${1}" which would be replaced by the
value in the first capture position.  Position is described in detail
in a later section.</t>

<t>Numeric backreference replacement indices start with one "1" to
maintain consistency with regular expression backreferences.</t>

</section>
<section anchor="star-backreference-replacement" title="Star backreference replacement">

<t>The next form of backreference notation is its star (or asterisk "<spanx style="emph">")
form.  In this form only an asterisk falls between the curly braces
"{" and "}".  This form "${</spanx>}" would be replaced by all captured
values in order of ascending position delimited by its default
delimiter (described below).  Position is described in detail in a
later section.</t>

</section>
<section anchor="numeric-range-backreference-replacement" title="Numeric range backreference replacement">

<t>The next form of backreference notation is the numeric range form. In
this form a range of numbers falls between the curly braces "{" and
"}".  An example of this is "${1-4}" which would be replaced by all
captured values within this range (1-4) in order of positions provided
delimited its default delimiter (described below).  To reverse the
order of positions in this example one could simply reverse the upper
and lower values to look like "${4-1}".  Position is described in
detail in a later section.</t>

</section>
<section anchor="numeric-set-backreference-replacement" title="Numeric set backreference replacement">

<t>The next form of backreference notation is the numeric set form.  In
this form a set of numbers falls between the curly braces "{" and "}"
separated by commas.  An example of this is "${1,4}" which would be
replaced by the first and fourth captured values in the order of
position provided delimited its default delimiter (described below).
Position is described in detail in a later section.</t>

<t>This notation may be combined with the numeric range form allowing
specific positions or position ranges to be used.  Examples would be
"${3,2,1,4-8}" and "${8-12,1-4}".</t>

</section>
<section anchor="backreference-delimiter" title="Backreference delimiter">

<t>The above sections reference a default delimiter.  In an effort to
provide an intuitive zone management experience the default delimiter
will be based on the BULK RR's Match Type.  For Match Type "A" the
default delimiter SHALL be a period ".", for Match Type "AAAA" the
default delimiter SHALL be a colon ":" and for Match Types "PTR" and
"CNAME" the default delimiter SHALL be a hyphen "-". In any case the
default delimiter MAY be overridden by including it in the
backreference braces after the set selectors and a backreference field
separator character, the pipe "|".  An example would be "${<spanx style="emph">|-}" which
would force a hyphen "-" delimiter.  An empty or null delimiter is
allowed by not specifying a delimiter character, for example "${</spanx>|}",
which would simply concatenate all captured values in order of capture
position.  Position is described in detail in a later section.</t>

</section>
<section anchor="backreference-delimiter-interval" title="Backreference delimiter interval">

<t>The default behavior of a backreference set is to combine each
captured value specified with a delimiter between each.  To allow
captured backreferences to be delimited at another interval a third
backreference field is provided.  An example would be "${*|-|4}" which
would concatenate all captured values but delimiting only every fourth
value with hyphens "-".  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or null
value MUST be interpreted as "1" or every captured value.</t>

</section>
<section anchor="backreference-padding-length" title="Backreference padding length">

<t>When generating BULK based records a common requirement is to convert
from one numeric format to another, padding is among the most common
of these.  The fourth and final backreference field determines what
width to pad to.  An example would be "${<spanx style="emph">|||4}" which would set the
width of all captured values to 4 by inserting leading zeros to fill
the void.  The default is empty or null which MUST be interpreted as
NO modification.  A width of zero "0" has a special interpretation
referred to as "unpad" meaning all leading zeros MUST be removed.  If
a value is provided captured values longer than this width MUST be
truncated to fit the specified width.  In the case where a delimiter
interval is provided captured values between the intervals will be
concatenated and the padding or unpadding applied as a unit and not
individually.  An example of this would be "${</spanx>||4|4}" which would
combine each range of 4 captured values and pad them to a width of 4
characters by inserting leading zeros where necessary.</t>

</section>
<section anchor="backreference-position" title="Backreference Position">

<t>Great effort has gone into providing zone maintainers an intuitive
syntax.  As part of this effort, the captured values will reverse
direction depending on several factors.</t>

<t>As a general rule of thumb, if it makes sense the numeric ranges are
in reverse order from query to answer then they will be
reversed. Otherwise they will be in the same order.</t>

<t>Take for example a simple reverse DNS lookup, from "10.2.3.4" to
"pool-A-3-4.example.com.".  Since DNS zones are arranged according to
management authority the records appear reversed numerically. In this
example "10.2.3.4" becomes "4.3.2.10.in-addr.arpa.". One would
intuitively expect this reversal to be reversed so positional indices
of captured values would increment toward the right of the Replacement
Pattern.  This expectation is especially important when using range
based replacements.</t>

<t>Formally, the rules for position reversal are as follows:</t>

<t>Match Type RRs for "PTR" are reversed for zone owners ending in either
".in-addr.arpa." or "ip6.arpa.".  All other Match Type RRs for "PTR"
are forward.</t>

<t>Match Type RRs for "A" (Address), "AAAA" (IPv6 Address) and "CNAME"
(Canonical Name) are forward.</t>

</section>
<section anchor="backreference-position-negation" title="Backreference Position Negation">

<t>To allow simple reversal of any backreference notation a single
exclamation point character "!" MAY be used as the first character of
a backreference set.  Examples would be "${!*}" and "${!1-4,7}". In
both of the examples the backreference positions SHALL be the exact
mirror equivalent as those without the leading exclamation point "!".
This can be very important if the BULK generated replacements have
values in positions opposite to what is required or expected.</t>

</section>
</section>
</section>
<section anchor="replacement-pattern-examples" title="Replacement Pattern examples">

<t>This section provides examples of several BULK RR Replacement
Patterns.  Each example is intended to further understanding for
implementors and DNS administrators alike.</t>

<t>EXAMPLE 1 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
    - 86400 IN BULK PTR - pool-${*}.example.com.
]]></artwork></figure>

<t>This example contains several of the features described above.</t>

<t>First, the record owner is simply a single hyphen "-" denoting it is a
"hidden wildcard" (wildcard for generated records but not for BULK).</t>

<t>Second, the Domain Name Pattern is also a single hyphen "-" denoting
all queries matching the owner's wildcard pattern for the "PTR" Match
Type are accepted and will be captured for use in the Replacement
Pattern.</t>

<t>Third, the Replacement Pattern contains a single "star" backreference
denoting all captured numeric (decimal) backreferences will be
combined with its default delimiter of hyphen "-" (for PTR) and placed
into the backreference's position in the answer-set.  Should this
generate an invalid hostname the response will be NXDOMAIN unless
other BULK records match and are successfully generated without error.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" then reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-10-2-3-4.example.com.".</t>

<t>EXAMPLE 2 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
- 86400 IN BULK PTR - pool-${*|||3}.example.com.
]]></artwork></figure>

<t>This example expands on EXAMPLE 1 with the differences outlined below.</t>

<t>The only change to the BULK RR is the Replacement Pattern includes
additional fields, specifically null values for delimiter and interval
and a padding width of 3.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" and reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-010002003004.example.com.".</t>

<t>EXAMPLE 3 This example contains a classless IPv4 delegation on the /22
CIDR boundary as defined by <xref target="RFC2317"/>.  The network for this example
is</t>

<t>"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<t>$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3</t>

<t>For this example, the query would come in for
"25.2.2.10.in-addr.arpa.".  After matching the owner filter (ending in
".2.10.in-addr.arpa.") and the fully qualified domain name pattern of
"[0-255].[0-3].2.10.in-addr.arpa." the answer-set would include a
generated RR consisting of captured values "25" and "2" joined by the
custom delimiter of period "." then joined by ".0-3" and made fully
qualified.  The resulting RR would be a "CNAME" with RDATA of
"25.2.0-3.2.10.in-addr.arpa.".  This record is now one delegated to
"ns1.sub.example.com." as its authority and the answer-set is
complete.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field-1" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing is "f".  Normalization Processing will be described in a later section.  This flag has a default value of "9" if set to false (0).</t>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets in verification (validation) nameservers for signatures generated based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<t>$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23</t>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as "65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of "65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "<spanx style="emph">.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${</spanx>|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-\[0-10]-\[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with bind's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementors of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document; BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of:</t>

<t>Robert Whelton (CenturyLink, Inc.)</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC2536;
&RFC2931;
&RFC3110;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;
<reference anchor="us-ascii" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
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

-->

</rfc>

