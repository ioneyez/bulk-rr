<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC2536 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2536.xml">
<!ENTITY RFC2931 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2931.xml">
<!ENTITY RFC3110 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3110.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 North Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 North Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Shashwath.Bindinganaveliraghavan@CenturyLink.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern based
creation of DNS resource records to be used in place of NXDOMAIN
errors which would normally be returned.  These records are currently
restricted to registered DNS resource record types A, AAAA, PTR and
CNAME.  The key benefit of the BULK resource record type is the
simplification of maintaining "generic" record assignments which would
otherwise be too many to manage or require scripts or proprietary
methods as bind's $GENERATE.</t>

<t>This document updates RFCs 2308, 4033, 4034 and 4035.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS Resource Record (BULK) defines a maskable pattern based
method for real-time on-the-fly resource record
generation. Specifically, it allows one to manage large blocks of DNS
records based entirely on record owner data in the RR query and
patterns (or templates) designed by knowledgeable zone
administrators. Existing DNS resource records covered by this document
are Address (A), IPv6 Address (AAAA), Pointer (PTR) and Canonical Name
(CNAME). Although other RR types are not explicitly forbidden from use
with BULK logic they fall outside of scope and will not be discussed
in this document.  This document defines the purpose of this new
resource record (BULK), its RDATA format, its presentation format
(ASCII representation) as well as generated responses to matched DNS
queries.</t>

<t>Two Key benefits of this record type are; a) the ability to transfer
BULK RR intentions from primary to secondary nameservers with minimal
bandwidth and memory requirements; and b) the ability to manage large
volumes of pattern based records such as an IPv6 /64 CIDR or larger in
a single entry.</t>

<t>Support options for DNSSEC related complications resulting from
dynamically generated records are also provided in this document.  One
such option is in the form of the Numeric Pattern Normalization (NPN)
resource record type also described in this document.  NPN resource
records provide a way of generating pattern based DNSSEC signatures
and securely performing DNSSEC validation on such signatures.</t>

<section anchor="background-and-related-documents" title="Background and Related Documents">

<t>This document assumes the reader is familiar with the basic DNS
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, and the subsequent
documents that update them, particularly <xref target="RFC2181"/> and <xref target="RFC2308"/>.</t>

<t>The reader is also assumed to be familiar with DNSSEC basics as
described in <xref target="RFC4033"/>, <xref target="RFC4034"/> and <xref target="RFC4035"/> as well as the DNS
cryptographic signature generation process described in <xref target="RFC4033"/>,
<xref target="RFC4034"/>, <xref target="RFC4035"/>, <xref target="RFC2536"/>, <xref target="RFC2931"/> and <xref target="RFC3110"/>.</t>

</section>
<section anchor="reserved-words" title="Reserved Words">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record consists of details which enable a DNS
nameserver to generate RRs of other types based upon query received
and patterns provided.  Unless otherwise stated the letters used in
hexadecimal numbers (a-f) MUST be case insensitive and are assumed to
be lowercase. All examples in this document using hexadecimal are
provided in lowercase.</t>

<t>The Type value for the BULK RR type is XX.</t>

<t>The BULK RR is class independent.</t>

<t>The BULK RR has no special TTL requirements but some security
guidelines are offered in a later section.</t>

<section anchor="bulk-optional-hidden-wildcards" title="BULK OPTIONAL Hidden Wildcards">

<t>The BULK RR extends current wildcard substitution logic as defined in
<xref target="RFC1034"/> by allowing a single hyphen "-" in the leftmost label to
represent the intent of leveraging a modified wildcard matching
mechanism.  If this condition exists wildcard logic SHALL be used for
generated replacement records but not for the BULK resource records
themselves.  This will become clearer in the "BULK Replacement"
section of this document.  If an asterisk "*" (the standard wildcard
character) is used default wildcard behavior MUST be used.</t>

</section>
<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR consists of a 2 octet Match Type Field, a
Domain Name Pattern Field and a Replacement Pattern Field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type Field">

<t>The Match Type field identifies the type of the RRset identified by
this BULK record.  This field consists of two octets corresponding to
an RR TYPE code as specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

</section>
<section anchor="the-domain-name-pattern-field" title="The Domain Name Pattern Field">

<t>The Domain Name Pattern Field consists of a text string which may be
evaluated by the sections below.  The character encoding for this
field is <xref target="us-ascii"></xref> and may not contain whitespace unless enclosed
within double-quote characters.  The value of a single hyphen "-" has
special implications and will be discussed in greater detail below.</t>

<t>The following syntax specification uses the Augmented Backus-Naur
Form (ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
      DIGIT  = <as defined in RFC 5234 Appendix B.1>
      HEXDIG = <as defined in RFC 5234 Appendix B.1>
      DQUOTE = <as defined in RFC 5234 Appendix B.1>

      pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

      part                =   "\[" range "]" / string

      range               =   number [ "-" number ]

      number              =   1*DIGIT / 1*HEXDIG

      string              =   1*( %x01-5A / %x5C / %x5E-7F )
                                 ; Any [US-ASCII] character excluding
                                 ; NUL and square bracket characters
                                 ; "\[" or "]"
]]></artwork></figure>

<t>Although allowed by <xref target="RFC2181"/>; the square bracket characters, "["
and "]", are reserved to enclose a range specification and MUST NOT
appear anywhere outside of a range specification.</t>

<section anchor="single-hyphen" title="Single hyphen">

<t>If the domain name pattern field consists of a single hyphen it is not
necessary to evaluate for numeric ranges or strings.  Implementors
SHOULD simply set a flag indicating all ranges matching the query's
label are true and backreferences (described in further detail in the
"BULK Replacement" section) will be automatically set.</t>

</section>
<section anchor="numeric-ranges" title="Numeric ranges">

<t>Numeric ranges include decimal or hexadecimal ranges depending on
which record type was used in the query.  This logic will be described
in further detail in the "Replacement Logic" section.</t>

<t>The numeric range pattern will be a range of allowed numbers lower and
upper values separated by a single hyphen "-".  If upper and lower
values are identical a single numeric value (without hyphen) will
suffice.  To easily distinguish numeric range patterns from string
values they MUST be enclosed within square brackets "[" and "]".</t>

</section>
<section anchor="string-values" title="String values">

<t>All values found before or after Numeric ranges (excluding
single-hyphen rule) are considered to be string values.  These values
will be taken literally when evaluating for pattern matches in the
"BULK Replacement" section below.</t>

</section>
</section>
<section anchor="the-replacement-pattern-field" title="The Replacement Pattern Field">

<t>The Replacement Pattern field describes how the answer RRset SHOULD be
generated for the matching query.  It can either be a single hyphen
"-" or a string containing backreferences (described in further detail
in the "BULK Replacement" section).  This field MUST be evaluated for
proper syntax for resource records of its Match Type defined above.  A
"read" evaluation MAY be performed when a zone is first committed to
memory either while converting from Text to Wire format (from stored
zone files) or when a RR transfer is received (raw Wire format).
Stage two "write" evaluations MUST be performed prior to returning
generated replacement answers.  Since logic to perform a stage two
evaluation is already a requirement for DNS nameservers it may be
easier for implementors to perform just stage two evaluations.
Stage-two-only evaluation may be also preferred for performance
purposes and is acceptable behavior.  Any stage two evaluation errors
MUST be processed as if the record did not exist and if all BULK
generated records for a query answer-set evaluate to errors the
original condition of an NXDOMAIN error state MUST be restored.</t>

<t>The following syntax specification uses the Augmented Backus-Naur Form
(ABNF) notation as specified in <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
      DIGIT  = <as defined in RFC 5234 Appendix B.1>
      HEXDIG = <as defined in RFC 5234 Appendix B.1>
      DQUOTE = <as defined in RFC 5234 Appendix B.1>

      pattern             =   "-" / 1*part / DQUOTE 1*part DQUOTE

      part                =   backreference / string

      backreference       =   "$" "{" substitution "}"

      substitution        =   range 0*( "," range ) [ options ]

      substitution        =/  "*" [ options ]

      options             =   delimiter [ interval [ padding ] ]

      delimiter           =   "|" 0*1( %x01-23 / %x25-7A / %7E-7F )
                                 ; Any single [US-ASCII] character
                                 ; excluding NUL, dollar sign "$",
                                 ; pipe "|" and curly brace characters
                                 ; "{" or "}"

      interval            =   "|" *2DIGIT

      padding             =   "|" *2DIGIT

      range               =   number [ "-" number ]

      number              =   1*DIGIT / 1*HEXDIG

      string              =   1*( %x01-23 / %x25-7A / %x7C / %7E-7F )
                                 ; Any [US-ASCII] character excluding
                                 ; NUL, dollar sign "$" and curly brace
                                 ; characters "{" or "}"
]]></artwork></figure>

<t>The dollar sign, "$", and curly brace characters, "{" and "}", are
reserved to enclose regular-expression-esque backreferences and MUST
NOT appear anywhere outside of such a backreference specification.
This rigidity is necessary to simplify implementation of this document
and may relax once adoption reaches an acceptable level and demand for
such an exception exists.  The authors feel this limitation is a
reasonable limitation for the flexibility offered by this document.</t>

</section>
</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Domain Name Pattern and Replacement Pattern fields MUST be
presented as the TXT RR type described in <xref target="RFC1035"/>, Section 3.3.14.</t>

</section>
<section anchor="bulk-rr-examples" title="BULK RR Examples">

<t>EXAMPLE 1</t>

<t>The following BULK RR stores a block of A RRs for example.com.</t>

<figure><artwork><![CDATA[
*.example.com. 86400 IN BULK A (
                                 pool-A-\[0-255]-\[0-255].example.com.
                                 10.55.${1}.${2}
                               )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "A" indicates that this BULK RR defines the A record
type (Address).  Value "pool-A-[0-255]-[0-255].example.com." indicates
the Domain Name Pattern.  Value "10.55.${1}.${2}" indicates the
Replacement Pattern.  The owner in this example is a wildcard and
matches any query ending with the string right of the asterisk.</t>

<t>EXAMPLE 2</t>

<t>The following BULK RR stores the reverse block of PTR records for the
first example.</t>

<figure><artwork><![CDATA[
*.55.10.in-addr.arpa. 86400 IN BULK PTR (
                                 \[0-255].\[0-255].55.10.in-addr.arpa.
                                 pool-A-${1}-${2}.example.com.
                               )
]]></artwork></figure>

<t>The first four fields specify the owner name, TTL, Class, and RR type
(BULK).  Value "PTR" indicates that this BULK RR defines the PTR
record type (Pointer).  Value "[0-255].[0-255].55.10.in-addr.arpa."
indicates the Domain Name Pattern.  Value
"pool-A-${1}-${2}.example.com." indicates the Replacement Pattern.
The owner in this example is a wildcard and matches any query ending
with the string right of the asterisk.</t>

<t>Additional examples can be found in the "BULK Replacement" section.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>The BULK Record is designed to enable DNS zone maintainers to manage
large blocks of DNS RRs which all conform to a common pattern. The
Domain Name Pattern field provides both a tertiary filter (after owner
and type) and a definition of all numeric pattern ranges.</t>

<t>When a query is first received by a DNS nameserver it begins its job
of locating an answer-set.  In its simplest form this begins by
locating the query owner (or wildcard suffix), class and type then
returning any matching RR RDATA (or errors).</t>

<t>In the event no matches for the query are found the nameserver of
authority will return an error type defined as NXDOMAIN.  In the case
of a "BULK" enabled authoritative nameserver an additional step MUST
be performed.  The nameserver MUST query its local RR database for any
"BULK" RRs with a matching owner, class and compatible Match Type.  If
any such RRs are found the query's owner MUST then be matched against
the Domain Name Pattern and all matching BULK records MUST be placed
into a temporary processing answer-set.  This temporary processing
answer-set MUST then follow the Replacement Pattern for each matched
record and provided no errors are found SHALL then write this new
answer-set to the query's complete answer set.  Matching replacements
will be of the type specified in the Match Type field of the
corresponding BULK RR. Additional detail is provided in the following
sections.</t>

<section anchor="matching-bulk-owner-field" title="Matching BULK &quot;owner&quot; field">

<t>The owner field of all BULK records MUST be that of either a wildcard
or hidden wildcard as defined in previous sections.  While a hidden
wildcard will not be searched for BULK records it will be added to the
database for use with the corresponding type field of each BULK RR.
This allows location of BULK records to be less conspicuous to the
public while still leveraging logic already included in the nameserver
thus minimizing the complexity of implementation.</t>

<t>A query SHALL pass the first filter stage (owner match) ONLY IF: (1)
an NXDOMAIN is set as the query's current answer set AND (2) the
query's owner ends with the BULK record's owner field past the leading
hyphen "-" or asterisk "*".</t>

</section>
<section anchor="matching-the-bulk-match-type-field" title="Matching the BULK &quot;Match Type&quot; field">

<t>The RR type of the received query must be compatible with that of the
Match Type of owners matched in the section above.  That is to say a
query for an "A" record will only match BULK records with matching
owner and Match Types of "A" (or "CNAME").  All other BULK records
matching the query's owner are incompatible and MUST be ignored as
part of the selected answer set.</t>

</section>
<section anchor="matching-the-bulk-domain-name-pattern-field" title="Matching the BULK &quot;Domain Name Pattern&quot; field">

<t>Assuming the RR owner and Match Type fields match the next step is to
find compatible Domain Name Patterns.  The logic for this falls into
two categories; automatic and manual which are described in greater
detail in the following sections.</t>

<section anchor="automatic-domain-name-pattern-matching" title="Automatic Domain Name Pattern matching">

<t>Automatic Domain Name Pattern matching is determined by use of a
single hyphen "-" as the value for Domain Name Pattern field.  This
assumes everything matches and all hexadecimal or decimal fields will
be captured for use as backreferences in the Replacement Pattern
(described below).  Automatic Domain Name Pattern matching is often
preferred for large blocks such as the reverse IPv6 address space for
the simplicity of record management.</t>

</section>
<section anchor="manual-domain-name-pattern-matching" title="Manual Domain Name Pattern matching">

<t>Manual Domain Name Pattern matching, while more complex is designed to
be both simple to implement and simple to use.  Below is an example
implementation for label matching using a combination of parsing by
regular expression and matching of numeric ranges.</t>

<t>Domain Name Patterns evaluate to current zone ORIGIN as defined in
<xref target="RFC1034"/>, Section 3.  In short this means all Manual Domain Name
Patterns must be terminated with a period "." or are assumed relative
to the RR's origin.</t>

<t>Numeric Ranges are either decimal or hexadecimal as determined by
conditions of query.</t>

<figure><artwork><![CDATA[
  If query type is "A" ranges are set to decimal.
  
  If query type is "AAAA" ranges are set to hexadecimal.

  If query type is PTR or CNAME the RR owner is used to determine
  decimal or hexadecimal.

     If RR owner ends in ".ip6.arpa." ranges are set to hexadecimal.

     If RR owner does _not_ end in ".ip6.arpa." ranges are set to decimal.
]]></artwork></figure>

<t>The square bracket characters, "[" and "]", are reserved to enclose a
range specification and MUST NOT appear anywhere outside of a range
specification.</t>

<section anchor="manual-domain-name-pattern-matching-examples" title="Manual Domain Name Pattern matching examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.4"
with an origin of "2.10.in-addr.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>[0-255].[0-10] == [0-255].[0-10].2.10.in-addr.arpa.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner != "*.ip6.arpa." so range is decimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
   \[0-255].\[0-10].2.10.in-addr.arpa. ==
                  /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on
decimal or hexadecimal and length.  Numeric range validation occurs in
the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
   4.3.2.10.in-addr.arpa.
               =~ /^(\[0-9]{1,3})\.(\[0-9]{1,2})\.2\.10\.in-addr\.arpa\.$/
]]></artwork></figure>

<t>"4" is captured and within range 0-255 (decimal)
"3" is captured and within range 0-10 (decimal)</t>

<t>EXAMPLE 2</t>

<t>For this example the query is defined as a PTR record for "fc00::55"
with an origin of "0.0.c.f.ip6.arpa." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.0.0.c.f.ip6.arpa. 86400 IN BULK PTR (
                                       -
                                       pool-${1-16|}-${17-28|}.example.com.
                                       )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<figure><artwork><![CDATA[
   - == \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].       ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].       ~~
        \[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].       ~~
        \[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa.
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>Since Hyphen invokes "Automatic Domain Name Pattern" matching, all
fields are captured for future use as backreferences.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "PTR" AND RR owner == "*.ip6.arpa." so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].            ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].            ~~
\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].\[0-f].            ~~
\[0-f].\[0-f].\[0-f].\[0-f].0.0.c.f.ip6.arpa. ==
               /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>The above regular expression simply matches numeric ranges based on decimal or hexadecimal and length.  Numeric range validation occurs in the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
5.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.                            ~~
0.0.0.0.0.0.0.0.0.0.0.0.0.0.c.f.ip6.arpa.
            =~ /^(\[0-9a-f]{1}\.){28}\.0\.0\.c\.f\.ip6\.arpa\.$/
]]></artwork></figure>

<t>NOTE: Data above is shown in multiple lines for clarity.</t>

<t>"5" is captured and within range 0-f (hexadecimal)
"5" is captured and within range 0-f (hexadecimal)
&#8230;
"0" is captured and within range 0-f (hexadecimal)
"0" is captured and within range 0-f (hexadecimal)</t>

<t>EXAMPLE 3
For this example the query is defined as an "AAAA" record for "pool-A-ff-aa.example.com." with an origin of "example.com." and the evaluating BULK RR as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
]]></artwork></figure>

<t>STEP 1
   Ensure "Domain Name Pattern" is Fully Qualified</t>

<t>pool-A-[0-ffff]-[0-ffff] == pool-A-[0-ffff]-[0-ffff].example.com.</t>

<t>STEP 2
   Determine whether range is decimal or hexadecimal</t>

<t>Query type == "AAAA" so range is hexadecimal.</t>

<t>STEP 3
   Build regular expression based on fully qualified domain name pattern.</t>

<figure><artwork><![CDATA[
pool-A-\[0-ffff]-\[0-ffff].example.com. ==
     /^pool-A-(\[0-9a-fA-F]{1,4})-(\[0-9a-fA-F]{1,4})\.example\.com\.$/
]]></artwork></figure>

<t>The above regular expression simply matches numeric ranges based on decimal or hexadecimal and length.  Numeric range validation occurs in the next step.</t>

<t>STEP 4
    Compare captured numbers and validate ranges</t>

<figure><artwork><![CDATA[
pool-A-ff-aa.example.com.
  =~ /^pool-A-(\[0-9a-fA-F]{1,4})-(\[0-9a-fA-F]{1,4})\.example\.com\.$/
]]></artwork></figure>

<t>"ff" is captured and within range 0-ffff (hexadecimal)
"aa" is captured and within range 0-ffff (hexadecimal)</t>

</section>
</section>
</section>
<section anchor="record-generation-using-the-bulk-replacement-pattern-field" title="Record Generation using the BULK &quot;Replacement Pattern&quot; field">

<t>Once it has been determined a query meets all criteria for a BULK
record generation the below rules are followed to process captured
numeric data and Replacement Pattern into RRs to apply to the
answer-set.</t>

<section anchor="replacement-pattern-backreferences" title="Replacement Pattern Backreferences">

<t>Before a record may be generated data must be captured in the Domain
Name Pattern comparison step above.  Each provided numeric range is
assigned to a temporary buffer to be used in this step.  To make the
jobs' of zone administrators easier the order of these buffers will
change based on the Match Type and owner so they will default to feel
more natural or intuitive.  Captured patterns and backreferences are
in the same vein as regular expressions and are intended to feel
"familiar".  This is described in further detail (with examples) in
the sections below.</t>

<section anchor="backreference-notation" title="Backreference Notation">

<t>BULK RRs use a dollar-sign "$" and curly braces "{" and "}" to enclose
backreferences within the Replacement Pattern.  The following rules
are used to determine the final replacement string.</t>

<section anchor="simple-numeric-backreference-replacement" title="Simple numeric backreference replacement">

<t>The simplest form of backreference notation is its numeric form.  In
this form only the backreference number falls between the curly braces
"{" and "}".  An example is "${1}" which would be replaced by the
value in the first capture position.  Position is described in detail
in a later section.</t>

<t>Numeric backreference replacement indices start with one "1" to
maintain consistency with regular expression backreferences.</t>

</section>
<section anchor="star-backreference-replacement" title="Star backreference replacement">

<t>The next form of backreference notation is its star (or asterisk "<spanx style="emph">")
form.  In this form only an asterisk falls between the curly braces
"{" and "}".  This form "${</spanx>}" would be replaced by all captured
values in order of ascending position delimited by its default
delimiter (described below).  Position is described in detail in a
later section.</t>

</section>
<section anchor="numeric-range-backreference-replacement" title="Numeric range backreference replacement">

<t>The next form of backreference notation is the numeric range form. In
this form a range of numbers falls between the curly braces "{" and
"}".  An example of this is "${1-4}" which would be replaced by all
captured values within this range (1-4) in order of positions provided
delimited its default delimiter (described below).  To reverse the
order of positions in this example one could simply reverse the upper
and lower values to look like "${4-1}".  Position is described in
detail in a later section.</t>

</section>
<section anchor="numeric-set-backreference-replacement" title="Numeric set backreference replacement">

<t>The next form of backreference notation is the numeric set form.  In
this form a set of numbers falls between the curly braces "{" and "}"
separated by commas.  An example of this is "${1,4}" which would be
replaced by the first and fourth captured values in the order of
position provided delimited its default delimiter (described below).
Position is described in detail in a later section.</t>

<t>This notation may be combined with the numeric range form allowing
specific positions or position ranges to be used.  Examples would be
"${3,2,1,4-8}" and "${8-12,1-4}".</t>

</section>
<section anchor="backreference-delimiter" title="Backreference delimiter">

<t>The above sections reference a default delimiter.  In an effort to
provide an intuitive zone management experience the default delimiter
will be based on the BULK RR's Match Type.  For Match Type "A" the
default delimiter SHALL be a period ".", for Match Type "AAAA" the
default delimiter SHALL be a colon ":" and for Match Types "PTR" and
"CNAME" the default delimiter SHALL be a hyphen "-". In any case the
default delimiter MAY be overridden by including it in the
backreference braces after the set selectors and a backreference field
separator character, the pipe "|".  An example would be "${<spanx style="emph">|-}" which
would force a hyphen "-" delimiter.  An empty or null delimiter is
allowed by not specifying a delimiter character, for example "${</spanx>|}",
which would simply concatenate all captured values in order of capture
position.  Position is described in detail in a later section.</t>

</section>
<section anchor="backreference-delimiter-interval" title="Backreference delimiter interval">

<t>The default behavior of a backreference set is to combine each
captured value specified with a delimiter between each.  To allow
captured backreferences to be delimited at another interval a third
backreference field is provided.  An example would be "${*|-|4}" which
would concatenate all captured values but delimiting only every fourth
value with hyphens "-".  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or null
value MUST be interpreted as "1" or every captured value.</t>

</section>
<section anchor="backreference-padding-length" title="Backreference padding length">

<t>When generating BULK based records a common requirement is to convert
from one numeric format to another, padding is among the most common
of these.  The fourth and final backreference field determines what
width to pad to.  An example would be "${<spanx style="emph">|||4}" which would set the
width of all captured values to 4 by inserting leading zeros to fill
the void.  The default is empty or null which MUST be interpreted as
NO modification.  A width of zero "0" has a special interpretation
referred to as "unpad" meaning all leading zeros MUST be removed.  If
a value is provided captured values longer than this width MUST be
truncated to fit the specified width.  In the case where a delimiter
interval is provided captured values between the intervals will be
concatenated and the padding or unpadding applied as a unit and not
individually.  An example of this would be "${</spanx>||4|4}" which would
combine each range of 4 captured values and pad them to a width of 4
characters by inserting leading zeros where necessary.</t>

</section>
<section anchor="backreference-position" title="Backreference Position">

<t>Great effort has gone into providing zone maintainers an intuitive
syntax.  As part of this effort, the captured values will reverse
direction depending on several factors.</t>

<t>As a general rule of thumb, if it makes sense the numeric ranges are
in reverse order from query to answer then they will be
reversed. Otherwise they will be in the same order.</t>

<t>Take for example a simple reverse DNS lookup, from "10.2.3.4" to
"pool-A-3-4.example.com.".  Since DNS zones are arranged according to
management authority the records appear reversed numerically. In this
example "10.2.3.4" becomes "4.3.2.10.in-addr.arpa.". One would
intuitively expect this reversal to be reversed so positional indices
of captured values would increment toward the right of the Replacement
Pattern.  This expectation is especially important when using range
based replacements.</t>

<t>Formally, the rules for position reversal are as follows:</t>

<t>Match Type RRs for "PTR" are reversed for zone owners ending in either
".in-addr.arpa." or "ip6.arpa.".  All other Match Type RRs for "PTR"
are forward.</t>

<t>Match Type RRs for "A" (Address), "AAAA" (IPv6 Address) and "CNAME"
(Canonical Name) are forward.</t>

</section>
<section anchor="backreference-position-negation" title="Backreference Position Negation">

<t>To allow simple reversal of any backreference notation a single
exclamation point character "!" MAY be used as the first character of
a backreference set.  Examples would be "${!*}" and "${!1-4,7}". In
both of the examples the backreference positions SHALL be the exact
mirror equivalent as those without the leading exclamation point "!".
This can be very important if the BULK generated replacements have
values in positions opposite to what is required or expected.</t>

</section>
</section>
</section>
<section anchor="replacement-pattern-examples" title="Replacement Pattern examples">

<t>This section provides examples of several BULK RR Replacement
Patterns.  Each example is intended to further understanding for
implementors and DNS administrators alike.</t>

<t>EXAMPLE 1 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
    - 86400 IN BULK PTR - pool-${*}.example.com.
]]></artwork></figure>

<t>This example contains several of the features described above.</t>

<t>First, the record owner is simply a single hyphen "-" denoting it is a
"hidden wildcard" (wildcard for generated records but not for BULK).</t>

<t>Second, the Domain Name Pattern is also a single hyphen "-" denoting
all queries matching the owner's wildcard pattern for the "PTR" Match
Type are accepted and will be captured for use in the Replacement
Pattern.</t>

<t>Third, the Replacement Pattern contains a single "star" backreference
denoting all captured numeric (decimal) backreferences will be
combined with its default delimiter of hyphen "-" (for PTR) and placed
into the backreference's position in the answer-set.  Should this
generate an invalid hostname the response will be NXDOMAIN unless
other BULK records match and are successfully generated without error.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" then reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-10-2-3-4.example.com.".</t>

<t>EXAMPLE 2 For this example the query is defined as a PTR record for
"10.2.3.4" with an origin of "2.10.in-addr.arpa." and the evaluating
BULK RR as:</t>

<figure><artwork><![CDATA[
- 86400 IN BULK PTR - pool-${*|||3}.example.com.
]]></artwork></figure>

<t>This example expands on EXAMPLE 1 with the differences outlined below.</t>

<t>The only change to the BULK RR is the Replacement Pattern includes
additional fields, specifically null values for delimiter and interval
and a padding width of 3.</t>

<t>The owner for "10.2.3.4" is "4.3.2.10.in-addr.arpa." and creates
matching backreferences for "4", "3", "2" and "10" and reverses their
indices so "${1}" resolves to "10", "${2}" to "2", "${3}" to "3" and
"${4}" to "4" respectively.  When applied to the Replacement Pattern
the answer becomes "pool-010002003004.example.com.".</t>

<t>EXAMPLE 3 This example contains a classless IPv4 delegation on the /22
CIDR boundary as defined by <xref target="RFC2317"/>.  The network for this example
is</t>

<t>"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<t>$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3</t>

<t>For this example, the query would come in for
"25.2.2.10.in-addr.arpa.".  After matching the owner filter (ending in
".2.10.in-addr.arpa.") and the fully qualified domain name pattern of
"[0-255].[0-3].2.10.in-addr.arpa." the answer-set would include a
generated RR consisting of captured values "25" and "2" joined by the
custom delimiter of period "." then joined by ".0-3" and made fully
qualified.  The resulting RR would be a "CNAME" with RDATA of
"25.2.0-3.2.10.in-addr.arpa.".  This record is now one delegated to
"ns1.sub.example.com." as its authority and the answer-set is
complete.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field-1" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing is "f".  Normalization Processing will be described in a later section.  This flag has a default value of "9" if set to false (0).</t>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets in verification (validation) nameservers for signatures generated based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       \[0-255].\[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<t>$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23</t>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as "65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of "65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "<spanx style="emph">.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${</spanx>|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-\[0-10]-\[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-\[0-ffff]-\[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with bind's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementors of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document; BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of:</t>

<t>Robert Whelton (CenturyLink, Inc.)</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC2536;
&RFC2931;
&RFC3110;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;
<reference anchor="us-ascii" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author >
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAHnj2VgAA+19eZfbxpXv//UpKrTnuNuPpNibNsc505ZatmaklqKWYufF
Hh2QBLsRkQADgGp1LM1nf/d3760FINiLJM8k84ayJS5AoerW3bcaDAamzup5
et9+9+rJv9uHxyf2RVoVq3KS0ptJUU4rk4zHZfpWr3jxwkyLSZ4s6JZpmczq
wXlRTM+Lsj4bjFfzN4OyHIwOzDSp6YLd0c6dwWh3sHNgTLYs79u6XFX17mh0
b7RrkjJN7tvHeZ2WeVqb89P7ePyz5/bHonyT5af2+7JYLc2b83DR4CGeaCZJ
fd9W9dSYSTGlK+/bVTVIqkmWmWV231g7sHUx4X+ri0WZzip5T5PkDyZZ1WdF
yVfS/9ZmeXXf/tuQnqxL4W9lkf9WnOWtH4qSHvkgzetVefEky9/0aYKTIf9U
0RNSmt3+7sHIHuMO+yjJylnyzj4s+YpJVl/ct4flnCZeF7l8V0zpSX86tLu7
u6M9/WqV1yVd+erkkL9IF0k2l+kM/XT+NZrFcFIszP/4JT0c2u+S+Tw9j9bz
ME3y+NtrLGZ37+DAPlzRLZV9UBBulfa7+dtp357UKaHtyO6NRtHafiD0m66t
jLB759KVYWJDmdgVyzqhZWU5kDnJk7fpPLMvktOz5G2SR+s8OUuqs/OENuCy
a/9hVu+nO2xOt9TZroMkL8pFUmdvU5BmOZvsjPb2w9sDfbu7s3PPv727497u
je76tzt33NuDvdvu7b09d+3ezs7IvT24567dH+3thbf74a178MGufOu4zX1e
rfLPBwSYqX1wlpTJhLiVPUlrOxjYO4NxVtvDRVpmE8LSkzrJp0k55cvtrChp
c2ayagVw9GK2NzlL8tOUfwpsy++zH/iYR0jm/gkV3V7R3Fa13Cwceefe3duC
CnRfWmX0cDfe4fHJ4/v2p73hvjFf2FfPHx6+PDoBrozu9i1gw3/v898Hdiub
2WS5LIu36XSbrt+yr599d/LsyZHctLvbusIMCBjJmDCQwGPMy7M0SJzSSZyS
JY6tL5apnaazLCf8TOwipWVPbTGzy6SGILDjpEqnZkICBIvGLx3DVCQE7Dil
3aJ9yXK7nCf0G117/NPDZ08PHx+btCyLsrLnZ9nkzJ4Xq/nUMgbO5xe4sUwJ
O/N0OrSWpluFcUly2cmqLAl95xeGHlvTHtT0FHpgmZ5mFU2SPm1aWmUP+/aQ
Xn37/OULS9tlHhwfPj2S59g3KZ6e0/JrzLZ2kOqEUlbhAlNli+U8mxEmOIAQ
CeY1/Q9B2jul4WiKPXdrUlXZab6g+TdWbwoaqzzPaKm0/LooaJT8Aquif5NT
Al5JI/xtldH6q0mZLel2+oq2eEnIVCflhZG9IhBVdkxE/1Vlv/z+6PjoBeES
syDaeJoyaRArPN2ulkDLyr549KBawzRAhpFtKNizyKbTeQrkJMIoi+lqwkTT
xKWW9mK38Mt2jE1J9SYZz9MWMimSzXiJyXxQZwtabz4giAxmhA8t6BsGKUN7
aE+W6YSBT4jTt7Rt9KY4J9jkaQS8eVLS3+N5MXlTKcoah1E8B0sQIdDSw2gL
daeKczBnAlICFAYuvHhh/7ZKywvGG11DZbdo3nVKSABwYrnYYBpyfGHf5MX5
PJ2eprzqv9OkTDJdEGaAFmsigKE9ekcfgCmdZDQhCi5lrDrePWhw9nA6pRto
AofbJGiev70dfUMv+vJ5kYGP2S1C9m3e0wdJXuQAF3GtRWq2GPu3h/ZwTnuw
Oj2zjIdYqZALnpMXtU3fEZKTSCII0T6NCR3S3M7KYgEaN+cZBCPwYF6cZhMA
i66jrbDFqq6yKdN+NSmIajCJ84x+waiE6tOsmqwqoAEDOVoj02SMsQ6RsBXL
VbksqlSolC7KSf9oU6ngH7CCsJxY6qEVdi/fLOlyGlWoVn4wW4cnDx4/pvvj
H7dBUecpTZn+VdyjLaErlkVepZXgWT05E75jgCLE34lyXp4X9t8DS6n8bGM2
QhD+xibbvKpknM1J7GNEQpC8mqWlUdXfYidzzKcSuBPdL4jscW1Fw0HwXLCy
QuKFkIamjE0BshFXNWOC+3k2pW+wAYt0UZQXjqEwM/qGfxivzSOmIPO2mNNW
VGvywONrtSKGRmAiqcgIeev2vn3w+OEL8CoeoqR1mMSS9DslikihvBCgTlbL
JSmgtljqAulyAuXJ0QMaec7gJiUFGJjIBQT81ZzJBrAw0wtauDCBxg4FmZHM
qwLc8m02FZHURrVnRJs8e5kDuLtSPXDDSYPjFQt9+1xXf8wyK/u7YNHW8fPj
7TU0lF3G84k1EOsed0+A7vX075mTzph453lygUk43kcrb+6Aggu8JyHZmZLt
SPtJmLFitrZMS6xDGQ2ufEvznqrMymXjws20J198QXr95M0pWYI0EAZ7oVvx
UCddmZZIIdnG6AFIESefYrdpM2lr5llSCkLiN5oxwRC0Qng7SSHLGqD59VcS
SlBAP3zo+w8H+IBpYIRqNa4IecEJ3dPx2MSJNVy06BOIyjqbrAjzCAQ8ELTW
Dx94HPlMgu/Dh6FIsjBn3i5ZzlR1meYyFIi8Eohcs74ASFO/gH1eTXjuPi8o
5ixYFoOkvFjWxWmZLEk7CFtig9QDVkzA5jc+00TP7McP1A9QzcMHUs7jqUFD
Z5AQBrwQbjKFY2BaCZSgJJ0zdvaevjp52evLv/b4Gb9/cfTHV49fHD3E+5Mf
Dp888W/kCkMfnr16or/jXbjzwbOnT4+OH8rNTw//3JMd7z17/vLxs+PDJz1H
OCbgXJnqBrGoI8YNFE26gAPjRRZmvd7S0lkijaZNxoSqFYlqZn5T0riyuVPg
0pzFe8LbFzgwpuWYETFwvlGkq4hWodsVCRHVKuhBKRlgU6Zcr144pkUs4lU+
x7YHVbGqmSCBOvMU11dO5TZn6TtC5gmYv81XizF+20oGs23Lm0XwmtDzYQGn
tC4Yfgxq5pUe7w1dRuoUWUJ0LZSEOSkCCTHitFpjYfRkcJf4uTSYiXluGErg
/BKckfjQSswxr26r9gFC/OmnYbQnEIOkFM1phjTeNF2m9Bdxz+YlZPuSdmEr
qIY0i5cvnzQknR2valsVpGMydyQ5Z05XNMW5aKkllIoZa1005cSC55W4lBVO
4Yt4kMNJ+4MoQz9m8+kk8VTiJpO+I7ENTU6MFug+fBmzMLYRQdGiNjHWQsfh
HYy4IPQ/VmwBYS89zy6WZ/Tg3qDnRNU8ndWLoqpp0uN0jg30qgz/LjoEEHGe
EoYmpzLeopiSDp1Ow+RYn6EfSTeHEZxVC0K/x6q9QNnIeNrpO6YIf5ssQ4jd
mX+0syaWyWwLMsJ4DZz2A9pgAwfaqrABR6/S+VsSTqoYsho5pp9pKyfzlHau
dIDoKXH7h/WM7qDXwSLRSwsjhSWB7ZhVb2zv657dYinjPAZugWbifAzbQERe
H+1YQrpIAMI4PUveZrQWR2i4LEIcUUV/hCX3SNRORhivodKGOOSJeU5id21B
j67tU2yOEM+jLJ1PiUmahwWsTlbqvXLCPwpVx6Bo/k4T+096tf0f8trp+LPb
8WfP7hk74h/37L49sLftHXvX3rvJd+b/DD7xj3kfTT0Ckn+9X1tg83Xr6jno
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

-->

</rfc>

