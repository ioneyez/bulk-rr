<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records.  The intent of BULK is to simplify
generic assignments in a memory-efficient way that can be easily
shared between the primary and secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern.  It is also akin to the $GENERATE
master file directive <xref target="bind-arm"/> without being limited to numeric
values and without creating all possible records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
domain name relative to the zone in which it appears.  Special
characters are interpreted as per the following Augmented Backus-Naur
Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit

hexnum        =  1*hexdigit

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding special and
non-printing characters.</t>

<t>Replacement Pattern is represented as with the TXT RR type described
in <xref target="RFC1035"/>, Section 3.3.14.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
standard master file parenthetical line continuation, per <xref target="RFC1035"/>
Section 5.1, starting after Match Type and ending after Replacement
Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the range match exactly and those within numeric ranges
have values that fall within the range.  Numeric matches MUST be of
the appropriate decimal or hexadecimal type as specified by the
delimiters in the pattern.  For example, if a range is given as
[0-255], then FF does not match even though its value as a hexadecimal
number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field.  ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, any relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in verification (validation) nameservers for signatures generated
based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       [0-255].[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with BIND's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].2.10.in-addr.arpa.
          pool-${*}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create
the references ${1} and ${2} with values 4 and 3, respectively.  The
${*} reference in the replacement pattern will then substitute them
with the default delimiter of hyphen between every character and no
special field width modifications.  The TTL of the BULK RR is used for
the generated record, making the response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-4-3.example.com.
]]></artwork></figure>

<t>[ John and Dean, I realize that without the automagic and reference
creation of the whole name as was described by earlier drafts, this
example materially changes by not only not having the numeric order
unreversed, but also by not including the 10 and the 2 in the
generated name.  With the current definition you would get the same
result as the original simply by using:</t>

<figure><artwork><![CDATA[
   @ 86400 IN BULK PTR (
          [0-255].[0-255].2.10.in-addr.arpa.
          pool-10-2-${2,1}.example.com.
        )
]]></artwork></figure>

<t>I will however also admit that it would be nice to get that 10 and 2
in there without having to hardcode them, so it needs some more thought.</t>

<t>]</t>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].2.10.in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, pattern to get the same result
is just ${1}.{$2}.0-3 ]</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

