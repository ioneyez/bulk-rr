<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records based on numeric substrings of query
names.  The intent of BULK is to simplify generic assignments in a
memory-efficient way that can be easily shared between the primary and
secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern of variable numeric substrings.  It is
also akin to the $GENERATE master file directive <xref target="bind-arm"/> without
being limited to numeric values and without creating all possible
records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit
                      ; constrained to 65535 maximum.

hexnum        =  1*hexdigit
                      ; constrained to ffff maximum.

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>[ Should [] and &lt;&gt; be allowed as short for [0-255] and &lt;00-ff&gt;? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the RDATA length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

<t>[ Should there be a defined limit on the number of references?  Even
every hex character of an IPv6 address is only 32 references, and
knowing a reasonable maximum can possibly simplify implementations. ]</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding whitespace and
other special characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
text rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<t>By only triggering the BULK algorithm when the query name does not
exist, administrators are given the flexibility to explicitly override
the behaviour of specific names that would otherwise match the BULK
record's Domain Name Pattern.  This is unlike BIND's $GENERATE
directive, which adds the generated RRs to any existing names.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate RDATA format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response.</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The Numeric Pattern Normalization (NPN) resource record provides
pre-processing information to reduce the number of possible variants
that can be generated by a BULK RR into one signable record.  By
identifying parts of the dynamic resource record which should be
ignored or represented as a static value, one exemplar record and
signature is used to validate all other records that match the
pattern.</t>

<t>For example, a pattern replacement like pool-A-${1}-${2}.example.com
that generates PTR records for pool-A-0-0.example.com through
pool-A-255-255.example.com would have an NPN record that signals a
validating resolver to verify all pool-A-#-#.example.com names against
a record for pool-A-9-9.example.com.</t>

<t>Though it is imperfect in that forged records could be validated as
legitimate, it is nevertheless an improvement over the security
afforded by non-DNSSEC DNS.</t>

<t>The Type value for the NPN RR type is TBD.</t>

<t>The NPN RR is class independent and has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for an NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type indicates the type of the RRset with which this record is
associated.</t>

<t>Flags defines additional processing parameters for data normalization.
This document defines only the Period-As-Number flag "." (position 5),
the Hyphen-As-Number "-" (position 6) and the hexadecimal flag "X"
(position 7).  All other flags are reserved for future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+

Bits 0-4: Reserved for future

Bit    5: Period As Number (.) Flag
   If 0, periods are treated as non-digits.
   If 1, periods will be processed as digits.

Bit    6: Hyphen As Number (-) Flag
   If 0, hyphens are treated as non-digits.
   If 1, hyphens will be processed as digits.

Bit    7: Hexadecimal (X) Flag
   If 0, numeric digits include only 0-9.
   If 1, numeric digits include a-f in addition to 0-9.
]]></artwork></figure>

<t>Owner Ignore defines the number of octets in the owner name, as
counted from the left, which MUST be ignored by the normalization
process.  This field offers additional security to pattern based
signatures which may not be immediately apparent.  By restricting the
leftmost characters defined by this value, ultimately the length of
the generated portion of the accompanying BULK RR will be confined
accordingly.</t>

<t>Left Ignore defines the number of octets of the generated RDATA, as
counted from the left, which MUST be ignored by the normalization
process.</t>

<t>Right Ignore defines the number of octets of the generated RDATA, as
counted from the right, which MUST be ignored by the normalization
process.</t>

</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Flags is a string of characters indicating the status of each bit as
per the following table.  The characters can appear in any order.</t>

<figure><artwork><![CDATA[
+------------------+-----------+-----------+
|       Flag       |   Unset   |    Set    |
+------------------+-----------+-----------+
| Period As Number |           |     .     |
+------------------+-----------+-----------+
| Hyphen As Number |           |     -     |
+------------------+-----------+-----------+
|   Hexadecimal    |     9     |     f     |
+------------------+-----------+-----------+
]]></artwork></figure>

<t>Owner Ignore, Left Ignore, and Right Ignore are displayed as unsigned
decimal integers, ranging from 0 through 255.</t>

</section>
<section anchor="use-and-normalization-processing-of-npn-rrs" title="Use and Normalization Processing of NPN RRs">

<t>[ This section needs reworking still, and should perhaps be pulled
out into a separate document.  Notably one of issues that is not
really described well is that, as designed so far, at signing time the
NPN record has to be associated with the matching BULK record, which
is slightly problematic with regard to the idea that NPNs are
suggested to be extended to be used in the future with other
patterns-based record generation.  Once the appropriate BULK record is
selected, the signer would then have to understand its semantics to
fake up the exemplar to sign &#8211; raising the question as to why it
doesn't also know the appropriate values for the Ignore fields, since
it will have to understand what the static and variable parts are.</t>

<t>One way around all this is to just sign the BULK record itself and return
it in the additional section along with the answer, so that the
resolver could validate not only a signature but the resulting record
based on the substitution algorithm.  It'd still be problematic for
older DNSSEC validators that don't grok BULK, but no more so than not
grokking NPN. Unfortunately to them in both cases the type-appropriate
answer itself will be unsigned and thus fail validation. ]</t>

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t><list style="symbols">
  <t>For RR's Owner field, characters from the beginning to the index of
the Owner Ignore value or the final string of characters belonging to
the zone's ORIGIN MUST NOT be modified by this algorithm.  While the
Owner Ignore value is not used for BULK records but is included with
the expectation other pattern-based resource records may emerge and
leverage NPN records for their DNSSEC support requirements.</t>
  <t>For RR's RDATA field, character from beginning to the index of Left
Ignore value or characters with index of Right Ignore value to the end
MUST NOT be modified by this algorithm.</t>
  <t>In the remaining portion of both Owner and RDATA strings of numeric
data, defined as character "0" through "f" or "0" through "9"
depending on whether or not the Hexadecimal flag is set or not, MUST
be consolidated to a single character and set to the highest value
defined by the Hexadecimal flag.  Examples may be found in the
following section.  If period-as-number or hyphen-as-number flags are
set whichever are used ("." or "-") would be treated as part of the
number and consolidated where appropriate.</t>
</list></t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
of the NPN processing required for the verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC-compatible RRset, including BULK generated ones.</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in validating nameservers for signatures generated based on NPN
normalization.</t>

</section>
</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record could be used to support other dynamic RR
types which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="unsupported-nameservers" title="Unsupported Nameservers">

<t>Authoritative nameservers that do not understand the semantics of the
new record type will not be able to deliver the intended answers even
when the type appears in their zone data This significantly affects
the interoperability of primary versus secondary authorities that are
not all running the same software.  Adding new RRs which affect
handling by authoritative servers, or being unable to add them, is an
issue that needs to be explored more thoroughly within dnsop.</t>

<t>On the resolver side, rolling out a new semantics in DNSSEC has also
proven to be difficult in the past.  Lacking NPN support effectively
means that operators using BULK will have to forego DNSSEC signing of
the affected zones, or do online signing of the dynamically generated
records.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide validation for DNS resource records.
In a nutshell this requires each (owner, class, type) tuple to have
its own signature.  This essentially defeats the purpose of providing
large generated blocks of RRs in a single RR as each generated RR
would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-signatures" title="On-the-fly Signatures">

<t>This solution requires authoritative nameservers to sign generated
records as they are created.  Not all authoritative nameserver
implementations offer on-the-fly signatures, and even with those that
do not all operators will want to keep signing keys online, so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to validating resolvers is required to support this
solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN-Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
additional DNSSEC-aware resolver support.</t>

<t>It has been pointed out that due to this limitation, creation of
DNSSEC-signed BULK RRs requiring NPN support SHOULD be formally
discouraged until such time a respectable percentage (&gt;80%) of
validating resolvers in-the-wild possess NPN processing capabilities.
Until that time, on-the-fly signing and unsigned records offer the
intended capabilities of the BULK specification, while requiring zero
new features to support RR resolution. The authors would like to
encourage opening this door for pattern based technologies such as NPN
records as a solution to BULK RRs as well as other pattern based RRs
to come. Given enough time, enough nameservers will be patched and
upgraded for unrelated reasons and by means of simple attrition can
supply a level of inertia and eventually widespread adoption can be
assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief that while
any logic which limits the input of digital signatures lessens the
validity of those signatures, the limitation is minimal and the gain
is significant.  The main reason for this is as a general rule, RRs
used in a generic manner such as conventional $GENERATE RRs or
scripted mass pattern generated RRs have a lesser importance than
other RRs in managed zones.  These therefore inherently pose less risk
by means of attack and have a much less reward by defeating security
measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-validator-details" title="DNSSEC Validator Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification using NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended, as this would
only result in a shift of the attack target, a balance will need to be
found.  While this document uses 24 hours (86400 seconds) in its
examples, values between 300 to 900 seconds are likely more
appropriate and is RECOMMENDED.  What is ultimately deemed appropriate
may differ from zone to zone and administrator to administrator.</t>

<t>[ I am unclear how this helps DDOS mitigation against anyone at all. ]</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large-Scale DNS Records">

<t>The production of such large-scale records in the wild may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the magnitude problem for BULK generated RRs are expected
be similar if not identical to that of existing wildcard records, the
core difference being the resultant RDATA will be unique for each
requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, negative_side-effects produced by implementing the
features described in this document can be eliminated from any such
service or product.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>Neither the BULK nor NPN records introduce any new privacy concerns to
DNS data.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>
<section anchor="npn-examples" title="NPN Examples">

<section anchor="example-1-1" title="EXAMPLE 1">

<figure><artwork><![CDATA[
2.10.in-addr.arpa. 86400 IN BULK PTR (
                                 [0-255].[0-10].2.10.in-addr.arpa.
                                 pool-A-${1}-${2}.example.com.
                            )
2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>A query for the PTR of address 10.2.3.44 would match As shown
previously in BULK RR examples the query would match the BULK record
for the query name 44.3.2.10.in-addr.arpa, generating a PTR to
pool-A-3-44.example.com as the answer.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
  0 1 2 3 4 5 6 7
                v---------
    p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                 ---------^
                          1 1 1 1                  
                          3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact, as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag 9, and each run of digits replaced by the single character
"9".  The final Normalized RDATA for *.2.10.in-addr.arpa would
therefore become pool-A-9-9.example.com., and its signature would be
based on this value to cover all possible permutations of the
pool-A-${1}-${2}.example.com replacement pattern.</t>

<t>Since the validating nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single signature.</t>

</section>
<section anchor="example-2-1" title="EXAMPLE 2">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
    86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
    86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
       0
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
                 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
                 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for digits
from 0 through 9 as indicated by the NPN record's hexadecimal flag
"9", with each run replaced by the single character "9".  The final
normalized RDATA would therefore become 9.9.0-3.2.10.in-addr.arpa
and its signature would be based on this normalized RDATA field.
This new normalized string would be used as an RDATA for the
wildcard label of 2.10.in-addr.arpa now encompassing all
possible permutations of the ${*|.}.0-3.2.10.in-addr.arpa. pattern.</t>

<t>As in example 1, the validatating resolver would use the same NPN
record for comparison.</t>

</section>
<section anchor="example-3-1" title="EXAMPLE 3">

<t>This example provides reverse logic for example 1 by providing an IPv4
address record for a requested hostname.  For this example the query is
defined as an A record for pool-A-3-44.example.com, with an origin
of example.com.  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
                                                0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For A and AAAA records this means the "Ignore" fields are based
on zero padded data.  In this example our generated record MUST be
converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for digits between 0 and 9 as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become 10.2.9.9 and
its signature would be based on this normalized RDATA field. This
new normalized A RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the 10.2.${</spanx>} pattern.</t>

</section>
<section anchor="example-4" title="EXAMPLE 4">

<t>This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an AAAA record for
pool-A-ff-aa.example.com with an origin of example.com..  RRs for this
example are defined as:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                )
example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For A and AAAA records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of *.example.com now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
xBOeAAA=

-->

</rfc>

