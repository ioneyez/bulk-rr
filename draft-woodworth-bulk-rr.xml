<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2308 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2308.xml">
<!ENTITY RFC2317 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2317.xml">
<!ENTITY RFC3597 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3597.xml">
<!ENTITY RFC4033 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4035.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-woodworth-bulk-rr-05" category="std" obsoletes="222" updates="2308, 4033, 4034, 4035">

  <front>
    <title abbrev="BULK RR">BULK DNS Resource Records</title>

    <author initials="J." surname="Woodworth" fullname="John Woodworth">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>4250 N Fairfax Dr</street>
          <city>Arlington</city>
          <code>VA 22203</code>
          <country>USA</country>
        </postal>
        <email>John.Woodworth@CenturyLink.com</email>
      </address>
    </author>
    <author initials="D." surname="Ballew" fullname="Dean Ballew">
      <organization>CenturyLink, Inc.</organization>
      <address>
        <postal>
          <street>2355 Dulles Corner Blvd, Ste 200 300</street>
          <city>Herndon</city>
          <code>VA 20171</code>
          <country>USA</country>
        </postal>
        <email>Dean.Ballew@CenturyLink.com</email>
      </address>
    </author>
    <author initials="S." surname="Bindinganaveli Raghavan" fullname="Shashwath Bindinganaveli Raghavan">
      <organization>Hughes Network Systems</organization>
      <address>
        <postal>
          <street>11717 Exploration Lane</street>
          <city>Germantown</city>
          <code>MD 20876</code>
          <country>USA</country>
        </postal>
        <email>shashwath.bindinganaveliraghavan@hughes.com</email>
      </address>
    </author>
    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>

    <date year="2017" month="February" day="15"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The BULK DNS resource record type defines a method of pattern-based
creation of DNS resource records.  The intent of BULK is to simplify
generic assignments in a memory-efficient way that can be easily
shared between the primary and secondary nameservers for a zone.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/bulk-rr&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The BULK DNS resource record defines a pattern-based method for
on-the-fly resource record generation.  It is essentially an enhanced
wildcard mechanism, constraining generated resource record owner names
to those that match a pattern.  It is also akin to the $GENERATE
master file directive <xref target="bind-arm"/> without being limited to numeric
values and without creating all possible records in the zone data.</t>

<t>For example, consider the following record:</t>

<figure><artwork><![CDATA[
example.com. 86400 IN BULK A (
                      pool-A-[0-255]-[0-255].example.com.
                      10.55.${1}.${2}
                   )
]]></artwork></figure>

<t>It will answer requests for pool-A-0-0.example.com through
pool-A-255-255.example.com with the IPv4 addresses 10.55.0.0 through
10.55.255.255.</t>

<t>Much larger record sets can be defined while minimizing the associated
requirements for server memory and zone transfer network bandwidth.</t>

<t>DNSSEC support is also described.  The Numeric Pattern Normalization
(NPN) resource record provides a way of generating pattern-based
DNSSEC signatures, and securely performing DNSSEC validation on such
signatures.</t>

<section anchor="background-and-terminology" title="Background and Terminology">

<t>ppThe reader is assumed to be familiar with the basic DNS and DNSSEC
concepts described in <xref target="RFC1034"/>, <xref target="RFC1035"/>, <xref target="RFC4033"/>,
<xref target="RFC4034"/>, and <xref target="RFC4035"/>; subsequent RFCs that update them in
<xref target="RFC2181"/> and <xref target="RFC2308"/>; and DNS terms in <xref target="RFC7719"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-bulk-resource-record" title="The BULK Resource Record">

<t>The BULK resource record enables an authoritative nameserver to
generate RRs for other types based upon the query received.</t>

<t>The Type value for the BULK RR type is TBD.</t>

<t>The BULK RR is class-independent.</t>

<section anchor="bulk-rdata-wire-format" title="BULK RDATA Wire Format">

<t>The RDATA for a BULK RR is as follows:</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       Domain Name Pattern     /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                                                               /
/                      Replacement Pattern                      /
/                                                               /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>Match Type identifies the type of the RRset to be generated by this
BULK record.  It is two octets corresponding to an RR TYPE code as
specified in <xref target="RFC1035"/>, Section 3.2.1.</t>

<t>Domain Name Pattern consists of a pattern encoded as a wire-format
fully qualified domain name.  The full name is used so that numeric
substrings above the zone cut can be captured in addition to those in
the zone.  It needs no length indicator for the entire field because
the root label marks its end.</t>

<t>Special characters are interpreted as per the following Augmented
Backus-Naur Form (ABNF) notation from <xref target="RFC5234"/>.</t>

<figure><artwork><![CDATA[
match         =  1*(range / string)

range         =  "[" decnum "-" decnum "]" /
                  "<" hexnum "-" hexnum ">"
                      ; create references for substitution

string        =  1*(ctext / quoted-char)

decnum        =  1*decdigit

hexnum        =  1*hexdigit

octet         =  %x00-FF

decdigit      =  %x30-39
                      ; 0-9
hexdigit      =  DIGIT / 0x41-0x46 / 0x61-66
                      ; 0-9, A-F, a-f

ctext         =  <any octet excepting "\">

quoted-char   = "\" octet
                       ; to allow special characters as literals
]]></artwork></figure>

<t>[ Should [] and &lt;&gt; be allowed as short for [0-255] and &lt;00-ff&gt;? ]</t>

<t>Interpretation of the Domain Name Pattern is described in detail in
the "BULK Replacement" section.</t>

<t>Replacement Pattern describes how the answer RRset MUST be generated
for the matching query.  It needs no length indicator because its end
can be derived from the rdata length minus Match Type and Domain Name
Pattern lengths.  It uses the following additional ABNF elements:</t>

<figure><artwork><![CDATA[
replace       =   1*(reference / string)

reference     =   "$" "{" (positions / "*") [options] "}"

positions     =   (position / posrange) 0*("," (position / posrange))

posrange      =   position "-" position

position      =   1*decnum

options       =   delimiter [interval [padding]]

delimiter     =   "|" *1(ctext | quoted-char)
                        ; "\|" to use "|" as delimiter
                        ; "\\" to use "\" as delimiter

interval      =   "|" *2DIGIT

padding       =   "|" *2DIGIT

]]></artwork></figure>

<t>[ Is this complexity beyond simple ${1}, ${2}, etc, really worth
it?  I definitely see how it could make for shorter replacement
patterns, but does it enhance their clarity and usability? ]</t>

<t>The Replacement Pattern MUST end in a period if it is intended to
represent a fully qualified domain name.</t>

</section>
<section anchor="the-bulk-rr-presentation-format" title="The BULK RR Presentation Format">

<t>Match Type is represented as an RR type mnemonic or with <xref target="RFC3597"/>'s
generic TYPE mechanism.</t>

<t>Domain Name Pattern is represented as a fully qualified domain name as
per <xref target="RFC1035"/> Section 5.1 rules for encoding special and
non-printing characters.</t>

<t>Replacement Pattern is represented by the standard &lt;character-string&gt;
rules for master files as per <xref target="RFC1035"/> section 5.1.</t>

<t>It is suggested that lines longer than 80 characters be wrapped with
parenthetical line continuation, per <xref target="RFC1035"/> Section 5.1, starting
after Match Type and ending after Replacement Pattern.</t>

</section>
</section>
<section anchor="bulk-replacement" title="BULK Replacement">

<t>When an authoritative nameserver receives a query for which it does
not have a matching name or a covering wildcard, it MUST then look for
BULK RRs at the zone apex, selecting all BULK RRs with a Match Type
that matches the query type and a Domain Name Pattern that matches the
query name.  Note that query type ANY will select all Match Types, and
all query types match a CNAME Match Type [ and DNAME? ].  One or more
answer RRs will be generated per the replacement rules below.
Examples are provided in an appendix.</t>

<section anchor="matching-the-domain-name-pattern" title="Matching the Domain Name Pattern">

<t>A query name matches the Domain Name Pattern if the characters that
appear outside the numeric ranges match exactly and those within
numeric ranges have values that fall within the range.  Numeric
matches MUST be of the appropriate decimal or hexadecimal type as
specified by the delimiters in the pattern.  For example, if a range
is given as [0-255], then FF does not match even though its value as
a hexadecimal number is within the range.</t>

<t>When a query name matches a Domain Name Pattern, the value in each
numeric range is stored for use by the Replacement Pattern, with
reference numbers starting at 1 and counting from the left.  For
example, matching the query name host-24-156 against
host-[0-255]-[0-255] assigns 24 to ${1} and 156 to ${2}.</t>

</section>
<section anchor="record-generation-using-replacement-pattern" title="Record Generation using Replacement Pattern">

<t>The Replacement Pattern generates the record data by replacing the
${&#8230;} references with data captured from the query name, and copying
all other characters literally.</t>

<t>The simplest form of reference uses only the reference number between
the braces, "{" and "}".  The value of the reference is simply
copied directly from the matching position of the query name.</t>

<t>The next form of reference notation uses the asterisk, "<spanx style="emph">".  With
${</spanx>}, all captured values in order of ascending position, delimited by
its default delimiter (described below), are placed in the answer.</t>

<t>Numeric range references, such as ${1-4}, replaces all values captured
by those references, in order, delimited by the default delimiter
described below.  To reverse the order in which they are copied,
reverse the upper and lower values, such as ${4-1}.  This is useful
for generating PTR records from query names in which the address is
encoded in network order.</t>

<t>Similar to range references, separating positions by commas creates
sets for replacement. For example, ${1,4} would be replaced by the
first and fourth captured values, delimited its default delimiter.
This notation may be combined with the numeric range form, such as 
${3,2,1,8-4}.</t>

<section anchor="delimiters" title="Delimiters">

<t>A reference can specify a delimiter to use between copied position
values by following a vertical bar, "|", with either zero or one
characters.  [ Why not any length? ]?  Zero characters, such as in
${1-3|}, means no delimiter is used.  The default delimiter is the
hyphen, "-". [ Earlier drafts attempted to make the default delimiter
context-dependent, such as by using a period for A requests and a
colon for AAAA requests.  This increases implementation complexity as
an attempt to make things more intuitive for zone administrators.
However it isn't clear that this is a net gain for ease of use. ]</t>

</section>
<section anchor="delimiter-intervals" title="Delimiter intervals">

<t>A second vertical bar in the reference options introduces a delimiter
interval.  The default behavior of a multi-position reference is to
combine each captured value specified with a delimiter between each.
With a delimiter interval the delimiters are only added between every
Nth value.  For example, ${*|-|4} adds a hyphen between every group of
four captured positions.  This can be a handy feature in the IPv6
reverse namespace where every nibble is captured as a separate value
and generated hostnames include sets of 4 nibbles.  An empty or 0
value for the delimiter interval MUST be interpreted as the default
value of 1.</t>

</section>
<section anchor="padding-length" title="Padding length">

<t>The fourth and final reference option determines the field width of
the copied value.  Shorter values MUST be padded with leading zeroes
("0") and longer values MUST be truncated to the width.</t>

<t>The default behavior, and that of an explicit empty padding length, is
that the captured query name substring is copied exactly.  A width of
zero "0" is a signal to "unpad", and any leading zeros MUST be
removed. [ Unnecessary complexity? ]</t>

<t>If a delimiter interval greater than 1 is used, captured values
between the intervals will be concatenated and the padding or
unpadding applied as a unit and not individually.  An example of this
would be ${*||4|4} which would combine each range of 4 captured values
and pad or truncate them to a width of 4 characters.</t>

<t>[ If this is kept, the element/feature should probably be renamed
from "padding" since it is just as likely to truncate. ]</t>

</section>
<section anchor="final-processing" title="Final processing">

<t>The string that results from all replacements is converted to the
appropriate rdata format for the record type.  If the conversion
fails, the SERVFAIL rcode MUST be set on the response.</t>

<t>The TTL of each RR generated by a BULK RR is the TTL of the
corresponding BULK record itself.  [ BULK should probably have its
own TTL field because using that of the record itself feels like bad
design.  On the other hand, if BULK is never meant to be queried for
directly and only appears in authoritative data, its own TTL is pretty
useless normally. ]</t>

<t>If the generated record type is one that uses domain names in its
resource record data, such as CNAME, a relative domain names MUST be
fully qualified with the origin domain of the BULK RR.</t>

</section>
</section>
</section>
<section anchor="the-npn-resource-record" title="The NPN Resource Record">

<t>The NPN resource record provides pre-processing directives for Numeric
Pattern Normalization (NPN) based RR signature generation.</t>

<t>The Type value for the NPN RR type is XX.</t>

<t>The NPN RR is class independent.</t>

<t>The NPN RR has no special TTL requirements.</t>

<section anchor="npn-rdata-wire-format" title="NPN RDATA Wire Format">

<t>The RDATA for a NPN RR consists of a 2 octet Match Type field, a 1
octet Flags field, a 1 octet Owner Ignore field, a 1 octet Left Ignore
field and a 1 octet Right Ignore field.</t>

<figure><artwork><![CDATA[
                     1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Match Type          |     Flags     |  Owner Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Left Ignore  |  Right Ignore |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<section anchor="the-match-type-field" title="The Match Type field">

<t>The Match Type field identifies the type of the RRset identified by
this NPN record.</t>

</section>
<section anchor="the-flags-field" title="The Flags field">

<t>The Flags field defines additional processing parameters for data
normalization.  This document defines only the Period-As-Number flag
"." (position 5), the Hyphen-As-Number "-" (position 6) and the
hexadecimal flag "X" (position 7).  All other flags are reserved for
future use.</t>

<figure><artwork><![CDATA[
 0 1 2 3 4 5 6 7
+-+-+-+-+-+-+-+-+
|Reserved |.|-|X|
+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<figure><artwork><![CDATA[
Bits 0-4: Reserved for future
   These flags have no default value if set to false (0).
Bit    5: Period As Number (.) Flag
   This flag indicates the period (dot) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    6: Hyphen As Number (-) Flag
   This flag indicates the hyphen (dash) will be processed as a
   number. This flag has no default value if set to false (0).
Bit    7: Hexadecimal (X) Flag
   This flag indicates the highest value for Normalization Processing
   is "f".  Normalization Processing will be described in a later
   section.  This flag has a default value of 9 if set to false (0).
]]></artwork></figure>

</section>
<section anchor="the-owner-ignore-field" title="The Owner Ignore field">

<t>The Owner Ignore field defines the length of characters as counted
from the left-hand side of the owner which MUST be ignored by the
normalization process.  This field offers additional security to
pattern based signatures which may not be immediately apparent.  By
restricting the leftmost characters defined by this value, ultimately
the length of the generated portion of the accompanying BULK RR will
be confined accordingly.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-left-ignore-field" title="The Left Ignore field">

<t>The Left Ignore field defines the length of characters as counted from
the left-hand side of the generated RDATA which MUST be ignored by the
normalization process.  Normalization Processing will be described
further in a later section.</t>

</section>
<section anchor="the-right-ignore-field" title="The Right Ignore field">

<t>The Right Ignore field defines the length of characters as counted
from the right-hand side of the generated RDATA which MUST be ignored
by the normalization process.  Normalization Processing will be
described further in a later section.</t>

</section>
</section>
<section anchor="the-npn-rr-presentation-format" title="The NPN RR Presentation Format">

<t>The Match Type field is represented as an RR type mnemonic.  When the
mnemonic is not known, the TYPE representation as described in
<xref target="RFC3597"/>, Section 5, MUST be used.</t>

<t>The Flags field MUST be presented as a string of characters
representing each flag bit.  This document defines only the period
".", hyphen "-" and hexadecimal "X" flags.  Flags MAY appear in any
order.  For example; all three flags could appear as "-9." or ".f-"
(without the quotes).  If all bits are zero all default values (if
defined) would be presented ("9" as currently defined).</t>

<t>All Ignore fields MUST be presented as an unsigned decimal integers
and fall within the 0-255 range available to a single octet.</t>

</section>
<section anchor="normalization-processing-of-npn-rrs" title="Normalization Processing of NPN RRs">

<t>This document provides a minor yet significant modification to DNSSEC
regarding how RRsets will be signed or verified.  Specifically the
Signature Field of <xref target="RFC4034"/>, Section 3.1.8.  Prior to processing into
canonical form, signed zones may contain associated RRs where; owner,
class and type of a non NPN RR directly corresponds with an NPN RR
matching owner, class and Match Type.  If this condition exists the
NPN RR's RDATA defines details for processing the associated RDATA
into a "Normalized" format.  Normalized data is based on pre-canonical
formatting and zero padded for "A" and "AAAA" RR types for acceptable
precision during the process.  This concept will become clearer in the
NPN pseudocode and examples provided in the sections to follow.</t>

<t>The rules for this transformation are simple:</t>

<t>For RR's Owner field, characters from the beginning to the index of
   the Owner Ignore value or the final string of characters belonging
   to the zone's ORIGIN MUST NOT be modified by this algorithm.  While
   the Owner Ignore value is not used for BULK records but is included
   with the expectation other pattern-based resource records may
   emerge and leverage NPN records for their DNSSEC support
   requirements.</t>

<t>For RR's RDATA field, character from beginning to the index of Left
   Ignore value or characters with index of Right Ignore value to the
   end MUST NOT be modified by this algorithm.</t>

<t>In the remaining portion of both Owner and RDATA strings of numeric
   data, defined as character "0" through "f" or "0" through "9"
   depending on whether or not the Hexadecimal flag is set or not,
   MUST be consolidated to a single character and set to the highest
   value defined by the Hexadecimal flag.  Examples may be found in
   the following section.  If period-as-number or hyphen-as-number
   flags are set whichever are used ("." or "-") would be treated as
   part of the number and consolidated where appropriate.</t>

<t>Once the normalization has been performed the signature will continue
processing into canonical form using the normalized RRs in the place
of original ones.</t>

<t>One thing to keep in mind when calculating values for the Ignore
fields is the Domain Name Pattern and Replacement Pattern fields are
considered relative unless terminated by a period.  When processing
NPN records the fully-qualified Patterns will be used for determining
which characters should be ignored.</t>

<t>NPN RRs MAY be included in the "Additional" section to provide a hint
for NPN processing required for verification path.</t>

<t>It is important to note, properly sizing the Ignore fields is critical
to minimizing the risk of spoofed signatures.  Never intentionally set
all Ignore values to zero in order to make validation easier as it
places the validity of zone data at risk. Only accompany RRs which are
pattern derived (such as BULK) with NPN records as doing so may
unnecessarily reduce the confidence level of generated signatures.</t>

<section anchor="pseudocode-for-npn-normalization-processing" title="Pseudocode for NPN Normalization Processing">

<t>This section provides a simple demonstration of process flow for NPN
rdata normalization and DNSSEC signatures.</t>

<t>The pseudocode provided below assumes all associated RRs are valid
members of a DNSSEC compatible RRset (including BULK generated ones).</t>

<figure><artwork><![CDATA[
   for rr in rrset
       if (has_NPN<rr.owner, rr.class, rr.type>)
           rr.rdata_normal = NPN_normalize<rr.rdata>
           add_to_sigrrset<NPN.owner, rr.class, rr.type,
               rr.rdata_normal>
           next
       else
           add_to_sigrrset<rr.owner, rr.class, rr.type, rr.rdata>
           next

   process_canonical_form<sigrrset>

   dnssec_sign<sigrrset>
]]></artwork></figure>

<t>Similar logic MUST be used for determining DNSSEC validity of RRsets
in verification (validation) nameservers for signatures generated
based on NPN normalization.</t>

</section>
<section anchor="npn-normalization-processing-examples" title="NPN Normalization Processing examples">

<t>EXAMPLE 1
For this example the query is defined as a PTR record for "10.2.3.44" with an origin of "2.10.in-addr.arpa." and the evaluating BULK and NPN RR as:</t>

<figure><artwork><![CDATA[
   -.2.10.in-addr.arpa. 86400 IN BULK PTR (
                                       [0-255].[0-10]
                                       pool-A-${1}-${2}.example.com.
                                       )
   *.2.10.in-addr.arpa. 86400 IN NPN  PTR 9 0 7 13
]]></artwork></figure>

<t>As shown previously in BULK RR examples the query would enter the
nameserver with an owner of "44.3.2.10.in-addr.arpa." and a "PTR" RR
with the RDATA of "pool-A-3-44.example.com." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "3-44" as illustrated below.</t>

<figure><artwork><![CDATA[
                              1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
                        v---------
            p o o l - A - 3 - 4 4 . e x a m p l e . c o m .
                         ---------^
        2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
        6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "3-44" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "pool-A-9-9.example.com." and
its signature would be based on this "normalized" RDATA field.  This
new "normalized" string would be used as an RDATA for the wildcard
label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "pool-A-${1}-${2}.example.com." pattern.</t>

<t>Since the verification (validation) nameserver would use the identical
NPN record for processing and comparison, all RRs generated by the
BULK record can now be verified with a single wildcard signature.</t>

<t>EXAMPLE 2</t>

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
0-3 86400 IN      NS    ns1.sub.example.com.
-   86400 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
*   86400 IN NPN  CNAME 9 0 0 23
]]></artwork></figure>

<t>For this example, a query of "10.2.2.65" would enter the nameserver as
"65.2.2.10.in-addr.arpa." and a "CNAME" RR with the RDATA of
"65.2.0-3.2.10.in-addr.arpa." would be generated.</t>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "65.2" as illustrated below.</t>

<figure><artwork><![CDATA[
                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
       v---------
         6 5 . 2 . 0 - 3 . 2 . 1 0 . i n - a d d r . a r p a .
        ---------^
     2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                  
     9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>Everything to the left of "65.2" will remain intact as will everything
to its right.  The remaining characters will be processed for numbers
between "0" and "9" as indicated by the NPN record's hexadecimal flag
"9" and each run replaced by the single character "9".  The final
Normalized RDATA would therefore become "9.9.0-3.2.10.in-addr.arpa."
and its signature would be based on this "normalized" RDATA field.
This new "normalized" string would be used as an RDATA for the
wildcard label of "*.2.10.in-addr.arpa." now encompassing all possible
permutations of the "${*|.}.0-3.2.10.in-addr.arpa." pattern.</t>

<t>As in example 1, the verification (validation) nameserver would use
the same NPN record for comparison.</t>

<t>EXAMPLE 3
This example provides reverse logic for example 1 by providing an IPv4
"A" record for a requested hostname.  For this example the query is
defined as an "A" record for "pool-A-3-44.example.com." with an origin
of "example.com.".  RRs for this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK A (
                                   pool-A-[0-10]-[0-255]
                                   10.2.${*}
                                  )
*.example.com. 86400 IN NPN  A 9 0 8 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "003.044" as illustrated below.</t>

<figure><artwork><![CDATA[
                                    1 1 1 1 1 1 1 1 1
                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8
                                v--------------
                  0 1 0 . 0 0 2 . 0 0 3 . 0 4 4
                                 ---------------^
            1 1 1 1 1 1 1 1 1
            8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example illustrates a key point about NPN records; since they are
pre-canonical they MUST operate on a strict subset of WIRE formatted
data.  For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "010.002.003.044" (shown above) prior to processing.
After processing, wire format would become "0x0A02032C" (shown in
hexadecimal).  This format would be too imprecise for normalization so
padded decimal is used.</t>

<t>Everything to the left of "003.044" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "9" as indicated by the NPN record's
hexadecimal flag "9" and each run replaced by the single character
"9".  The final Normalized RDATA would therefore become "10.2.9.9" and
its signature would be based on this "normalized" RDATA field. This
new "normalized" "A" RR would be used as an RDATA for the wildcard
label of "<spanx style="emph">.example.com." now encompassing all possible permutations
of the "10.2.${</spanx>}" pattern.</t>

<t>EXAMPLE 4
This example provides similar logic for an IPv6 AAAA record.  For this
example the query is defined as an "AAAA" record for
"pool-A-ff-aa.example.com." with an origin of "example.com.".  RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
-.example.com. 86400 IN BULK AAAA (
                                   pool-A-[0-ffff]-[0-ffff]
                                   fc00::${1}:${2}
                                  )
*.example.com. 86400 IN NPN  AAAA X 0 30 0
]]></artwork></figure>

<t>By protecting the "Ignore" characters from the generated RR's RDATA
the focus for normalization becomes "00ff:00aa" as illustrated below.</t>

<figure><artwork><![CDATA[
                      1 1 1 1 1 1 1 1 1 1 2 2
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

    f c 0 0 : 0 0 0 0 : 0 0 0 0 : 0 0 0 0 : -/-/

  4 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 1
  0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9
   /-/-/- . . . . . . . . . . . . . . . . . . . . . . . . -/-/-/
                          2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4
                          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
                                            v------------------
                     /-/- 0 0 0 0 : 0 0 0 0 : 0 0 f f : 0 0 a a
                                             -------------------^
                        2 1 1 1 1 1 1 1 1 1 1 
                        0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
]]></artwork></figure>

<t>This example reinforces the point on pre-canonical processing of NPN
records; they MUST operate on a strict subset of WIRE formatted
data. For "A" and "AAAA" records this means the "Ignore" fields are
based on zero padded data.  In this example our generated record MUST
be converted into "fc00:0000:0000:0000:0000:0000:00ff:00aa" (shown
above) prior to processing.  After processing, wire format would
become "0xFC000000000000000000000000FF00AA" (shown in
hexadecimal). This format is slightly misleading as it is truly only
16 bytes of WIRE data and would be too imprecise for normalization so
padded hexadecimal is used.</t>

<t>Everything to the left of "00ff:00aa" will remain intact as will
everything to its right.  The remaining characters will be processed
for numbers between "0" and "f" as indicated by the NPN record's
hexadecimal flag "X" and each run replaced by the single character
"f".  The final Normalized RDATA would therefore become "fc00::f:f"
and its signature would be based on this "normalized" RDATA
field. This new "normalized" "AAAA" RR would be used as an RDATA for
the wildcard label of "*.example.com." now encompassing all possible
permutations of the "fc00::${1}:${2}" pattern.</t>

</section>
</section>
</section>
<section anchor="positive-side-effects" title="Positive Side-Effects">

<t>This section highlights positive side effects of some architectural
decisions regarding the BULK RR design.</t>

<section anchor="record-superimposition" title="Record Superimposition">

<t>The main side-effect of the BULK RR design is superimposition.  RRs
created by the BULK generation process generally rely on the logic of
wildcard assignment.  This logic only provides answers where no others
exist.  This means in the reverse DNS world (network assignment) HUGE
blocks of addresses can be assigned a single BULK record and where
delegated to another customer or SWIP will be automatically
overridden.</t>

<t>When compared with BIND's $GENERATE statement, if a singleton record
such as CNAME appears within a $GENERATE range, either the CNAME or
$GENERATE becomes invalid.  While a BULK record range would
automatically notch out the CNAME without user intervention or
creating a potential management problem for the future when two
$GENERATES create a hole where the CNAME no longer exists.  BULK RRs
would again automatically reassign the missing record to one of its
own.</t>

</section>
<section anchor="pattern-based-dnssec-support" title="Pattern Based DNSSEC support">

<t>The NPN resource record can be used to support other dynamic RR types
which do not currently exist.</t>

</section>
</section>
<section anchor="known-limitations" title="Known Limitations">

<t>This section defines known limitations of the BULK resource type.</t>

<section anchor="increased-cpu-utilization-for-nxdomain-rrs" title="Increased CPU utilization for NXDOMAIN RRs">

<t>Nameserver requirements to support BULK RRs will minimally increase
CPU utilization requirements compared to most RR types.  However,
since the inception of DNSSEC more is expected of DNS servers at a
system resource level and it is the authors' belief the benefit
outweighs the sacrifice.</t>

<t>A quick comparison of BULK versus bind's $GENERATE expansion reveals
much more memory would be sacrificed with $GENERATES to save the CPU
cycles required to support BULK records.  Additionally, $GENERATES
cannot be transferred (i.e. AXFR) without expansion and an IPv6 CIDR
even as small as /96 would be simply impossible.  BULK on the other
hand can easily support IPv6 CIDRs of /64 and much larger with very
little effort.</t>

</section>
<section anchor="pre-adoption-nameserver-implications" title="Pre-Adoption Nameserver Implications">

<t>While there is an added demand on authoritative nameservers, there are
no new requirements to recursive (caching) resolvers for non-DNSSEC
record handling.  Even authoritative nameservers are able to transfer
to and from supporting nameservers with no requirement (although would
be unable to return BULK generated records without support).</t>

<t>Prior to widespread adoption on the authoritative side all generated
records would be invisible if served on nameservers lacking
support. Since generated records are generally NOT service impacting
records this should be understood but not of great concern.</t>

<t>Once adoption has reached an appreciable level on the producer
(authoritative) side only DNSSEC requirements remain for the consumer
(resolver) side.  This behavior is fully expected.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Two known security considerations exist for the BULK resource record,
DNSSEC and DDOS attack vectors.  Both are addressed in the following
sections.</t>

<section anchor="dnssec-signature-strategies" title="DNSSEC Signature Strategies">

<t>DNSSEC was designed to provide verification (validation) for DNS
resource records.  In a nutshell this requires each (owner, class,
type) tuple to have its own signature.  This essentially defeats the
purpose of providing large generated blocks of RRs in a single RR as
each generated RR would require its own legitimate RRSIG record.</t>

<t>In the following sections several options are discussed to address
this issue.  Of the options, on-the-fly provides the most secure
solution and NPN provides the most flexible.</t>

<section anchor="on-the-fly-live-signatures" title="On-the-fly (Live) Signatures">

<t>This solution requires authoritative nameservers to sign generated
records <spanx style="emph">as_they_are_generated</spanx>.  Not all authoritative nameserver
implementations offer on-the-fly (realtime) signatures so this
solution would either require all implementations to support
on-the-fly signing or be ignored by implementations which can not or
will not comply.</t>

<t>No changes to recursive (resolving) nameservers is required to support
this solution.</t>

</section>
<section anchor="normalized-npn-based-signatures" title="Normalized (NPN Based) Signatures">

<t>This solution provides the most flexible solution as nameservers
without on-the-fly signing capabilities can still support signatures
for BULK records.  The down side to this solution is it requires
DNSSEC aware recursive (resolving) nameserver support.  Unless a
recursive nameserver can verify the signature it is <spanx style="emph">unverifiable</spanx>.</t>

<t>It has been pointed out due to this limitation creation of DNSSEC
signed BULK RRs requiring NPN support SHOULD be formally discouraged
until such time a respectable percentage (&gt;80) of DNSSEC verification
(validation) nameservers "in-the-wild" possess NPN processing
capabilities.  Until that time, on-the-fly signing and unsigned BULK
records offer the intended capabilities of this document while
requiring zero new features to support RR resolution. The authors
would like to encourage opening this door for pattern based
technologies such as NPN records as a solution to BULK RRs as well as
other pattern based RRs to come. Given enough time, enough nameservers
will be patched and upgraded for unrelated reasons and by means of
simple attrition can supply a level of "inertia" and eventually
widespread adoption can be assumed.</t>

<t>NPN records are likely to be a topic of great debate as to their own
security limitations.  It is, however, the authors' belief; while any
logic which limits the input of digital signatures, lessens the
validity of such signatures, the limitation is minimal and the gain is
significant.  The main reason for this is as a general rule, RRs used
in a generic manner such as conventional $GENERATE RRs or scripted
mass pattern generated RRs have a lesser importance than other RRs in
managed zones.  These therefore inherently pose less risk by means of
attack and have a much less reward by defeating security measures.</t>

<t>This being said, care must still be taken to set the Ignore fields
appropriately to minimize exposure and only use NPN RRs to secure
pattern-based records such as BULK.</t>

</section>
<section anchor="non-dnssec-zone-support-only" title="Non-DNSSEC Zone Support Only">

<t>As a final option zones which wish to remain entirely without DNSSEC
support may serve such zones without either of the above solutions and
records generated based on BULK RRs will require zero support from
recursive (resolving) nameservers.</t>

</section>
</section>
<section anchor="dnssec-verifier-details" title="DNSSEC Verifier Details">

<t>Verification of DNSSEC signed BULK generated RRs may be performed
against on-the-fly signatures with zero modification to their
behavior.  However, verification against NPN records would require
changes to the logic to incorporate processing RDATA generated by BULK
logic as described above so the results will be compatible.</t>

</section>
<section anchor="ddos-attack-vectors-and-mitigation" title="DDOS Attack Vectors and Mitigation">

<t>As an additional defense against Distributed Denial Of Service (DDOS)
attacks against recursive (resolving) nameservers it is highly
recommended shorter TTLs be used for BULK RRs than others.  While
disabling caching with a zero TTL is not recommended (as this would
only result in a shift of the attack target) a balance will need to be
found.  While this document uses 24 hours (86400) in its examples
values between 300 to 900 are likely more appropriate and is
RECOMMENDED.  What is ultimately deemed appropriate may differ from
zone to zone and administrator to administrator.</t>

</section>
<section anchor="implications-of-large-scale-dns-records" title="Implications of Large Scale DNS Records">

<t>The production of such large scale "records in the wild" may have some
unintended side-effects.  These side-effects could be of concern or
add unexpected complications to DNS based security offerings or
forensic and anti-spam measures.  While outside the scope of this
document, implementers of technology relying on DNS resource records
for critical decision making must take into consideration how the
existence of such a volume of records might impact their technology.</t>

<t>Solutions to the "magnitude" problem for BULK generated RRs are
expected be similar if not identical to that of existing wildcard
records, the core difference being the resultant RDATA will be unique
for each requested Domain Name within its scope.</t>

<t>The authors of this document are confident that by careful
consideration, <spanx style="emph">negative_side-effects</spanx> produced by implementing the
features described in this document <spanx style="emph">can_be_eliminated</spanx> from any such
service or product.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to assign numbers for two DNS resource record types
identified in this document: BULK and NPN.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This document was created as an extension to the DNS
infrastructure. As such, many people over the years have contributed
to its creation and the authors are appreciative to each of them even
if not thanked or identified individually.</t>

<t>A special thanks is extended for the kindness, wisdom and technical
advice of Robert Whelton (CenturyLink, Inc.) and Gary O'Brien
(Secure64).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1034;
&RFC1035;
&RFC2119;
&RFC2181;
&RFC2308;
&RFC2317;
&RFC3597;
&RFC4033;
&RFC4034;
&RFC4035;
&RFC5234;


    </references>

    <references title='Informative References'>

&RFC7719;
<reference anchor="bind-arm" target="https://ftp.isc.org/isc/bind9/cur/9.9/doc/arm/Bv9ARM.html">
  <front>
    <title>BIND 9 Configuration Reference</title>
    <author >
      <organization>Internet Systems Consortium</organization>
    </author>
    <date year="2016"/>
  </front>
</reference>


    </references>


<section anchor="bulk-examples" title="BULK Examples">

<section anchor="example-1" title="Example 1">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${4-1}.example.com.
        )
]]></artwork></figure>

<t>A query received for the PTR of 4.3.2.10.in-addr.arpa will create the
references ${1} through ${4} with the first four labels of the query
name.  The ${4-1} reference in the replacement pattern will then
substitute them in reverse with the default delimiter of hyphen
between every character and no special field width modifications.  The
TTL of the BULK RR is used for the generated record, making the
response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-10-2-3-4.example.com.
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2">

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@ 86400 IN BULK PTR (
          [0-255].[0-255].[0-255].[0-255].in-addr.arpa.
          pool-${2,1|||3}.example.com.
        )
]]></artwork></figure>

<t>Example 2 is similar to Example 1, except that it modifies the
replacement pattern.  The empty option after the first
vertical bar causes no delimiters to be inserted, while the second
empty option that would keep the delimiter interval as 1.  The latter
is relevant because the final value, padding of 3, is applied over
each delimiter interval even when no delimiter is used.  Not all
captures from the substring are required to be used in the response.</t>

<t>The result is that a query for the PTR of 4.3.2.10.in-addr.arpa
generates this response:</t>

<figure><artwork><![CDATA[
4.3.2.10.in-addr.arpa 86400 IN PTR pool-003004.example.com.
]]></artwork></figure>

<t>[ Admittedly you can't do this very effectively without the field
width complexity. Is this sort of name common?  Does it need support?
Admittedly $GENERATE had the feature, but is that reason enough? ]</t>

<t>[ Change this to a hex matching example? ]</t>

</section>
<section anchor="example-3" title="Example 3">

<t>This example contains a classless IPv4 delegation on the /22 CIDR
boundary as defined by <xref target="RFC2317"/>.  The network for this example is
"10.2.0/22" delegated to a nameserver "ns1.sub.example.com.". RRs for
this example are defined as:</t>

<figure><artwork><![CDATA[
$ORIGIN 2.10.in-addr.arpa.
@    7200 IN BULK CNAME [0-255].[0-3] ${*|.}.0-3
0-3 86400 IN NS ns1.sub.example.com.
]]></artwork></figure>

<t>A query for the PTR of 25.2.2.10.in-addr.arpa is received and the BULK
record with the CNAME Match Type matches all query types.  25 and 2
are captured as references, and joined in the answer by the period
(".") character as a delimiter, with ".0-3" then appended literally
and fully qualified by the origin domain.  The final synthesized
record is:</t>

<figure><artwork><![CDATA[
25.2.2.10.in-addr.arpa 7200 IN CNAME 25.2.0-3.2.10.in-addr.arpa.
]]></artwork></figure>

<t>[ Without $* and options complexity, the pattern to get the same
result is just ${1}.{$2}.0-3 which is not really significantly onerous
to enter, and slightly less arcane looking to comprehend. ]</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAF+bV1kAA+19+3cbR7Le7/1X9IGdY9IBIPAhyZJ97aUkyua9EqWQ8tp7
LUVnCDTIuQRmcGcGpLiW8renvqrqxwwBkpY32Zwk1K5MATP9rMdX1VXVg8HA
NHkzc4/tk59f/Jt9dnhsj1xdLquxo1/GZTWpTXZyUrkLfeLoyEzKcZHN6ZVJ
lU2bwWVZTi7LqjkbnCxn54OqGozum0nW0APbo62Hg9H2YOu+Mfmiemybalk3
26PRo9G2ySqXPbYHReOqwjXm8vQxun/12v5SVud5cWp/rMrlwpxfxocGz9Cj
GWfNY1s3E7NcoJ+aOtoZfdO3u6OdHf57l/++b8qTupw5eWJ725hxOaGGH9tl
PcjqcZ6bRf7YWDuwTTnm/9ZX88pNa/md5sT/MNmyOSsrfpL+b21eUIP/OqSB
6sz5U1mTfy3Pis4XZUVdPnVFs6yuXuTFeZ/mMx7yVzX14Ggyu9v3R/bQPs/y
app9sM8q/nacN1eP7V41o0E3ZSGflRPq5a97mNBoRz9aFk1FT/58vMcfuHmW
z2QowzCUvyQjGI7LuWlP59nQPslmM3eZzOWZy4r00ztMZHvn/n37bEmv1PZp
SXtW2Sezi0nfHjeOyGFkd0ajZG4/0bZOrs2MqGbrxplhYEMZ2C3TOqZp5QV2
PSuyCzfL7VF2epZdZEUyz+OzrD67zJqzG5/l2f+0PD2jqR26hhb13B5f1Y2b
160l2KLRP7T7HxazssqavCzsi6xwyaR/dNU8K5ryMp33y2c0728ePrhx3rUf
6PCkNdBKx/mXMx7eyu19OqRxXFauGLt0i7OLfGKftr/ime6dZ9SpfePGZ0U5
K09z15kmUeyTqswml9lVMrmn2fykyienLp3bnh1tb+2SHBjd371xgk02c3/J
uGeZRFHSWjX5hQP3VdPxFjF3/PW+/rq9tfUo/PrNlv+VhEL4deuh/rpz/5H/
FfIi/robf/Xt3t/GpyYvpp1hPHwoHWIbBlk1f8yT8JL04PCZfUTkX0zz06XS
wJGburjCUaKE9fYyztMU3ocIypdzfixIVCGRJqtOsQ1nTbOoH9+7N20Ww7we
D6mte/TfexjZo3vjZXXv0fDRPRLZ92iY955cPNo7ejk8a+YzYwaDgc1OaD+z
cWPMmzMXdUDldUDFOsA2VwtnJ26aF0T8mZ07Gv7EllO7yBoMe3CS1W5ixiTS
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
xjv6sLs1oL8e8O8PtgYPHtzUUN/uDZ4T7hhMjZEpJ0P8LiuuhK/JygGIwyr1
3va+NyZZFn6WPpUn13RGvUEWgNxsvYJGazLRGngIahVVb3+zx2Jcv/3tHeOi
775nGxtNCBWT8U1gHNv5Vk0ifu7td7Sw0+n3P9i378is8ZQffDkg/FVyJe+g
qAm9k8884/YUQAWp3wPwZqvZmFXKwLdV2zOaM1slYlmJeGUQmQpY49me+Qgr
zYDpNmGhcsGLABPMowooS5iVZQZMVv86QfxlneICBsJxTYyfhDxfyyCWtSqL
KDYSBxGkhHUzsbQ8lKpkYSJJsVDwvNgSDOFD/2Tvy57t/d6zG2SJcyc1Pd/7
urdpfysX/O93tvepR2ZK+N6/Gl6hN+hXFjqbdvT1Rq/fW/3lJjeTSCc0Ex6E
rPH/iP2lkxLBQGy+iCOR7yZOnA+V/Y2lMIFd+9sCC1ecvnsH9vffh4l/7Nmv
t1QCfWxLoDXcRezVe0uvEY+BGNACGwXa9I2vvY2vve28ZsKI24PbZmlDKyHT
sGu+Dpx8UDN2INUNx8CHvLkiGr0qYbzCUeosPBR9CxcF+9X6MDqhtuXcKW9+
IAIUk5/GRZ/XzjFbkQAcs5CYZ+diQbBQYJdBYEmjGIHs5RNS15PSQWN6rxYo
Oq9gUFQYFzhhWWcnZNo2VyJC2HhYweHMwsRz4tAlnZqX9PsUbee1+IUnbC2D
DQgUsQFnb8IjbMOkls5reU1klzdmUhRX29C2gp8i2E7zws3LgizyUm10Vto4
Mvj06as6uKYZmgWH3hrQtaKjm2YClAeQkYC7gO3uD7dstZypJmbcBhryWoE2
wBRlMViQYGCFE9XEGknbGRsDVUeSJYNjHPogtDAQcfO9if0nrsTaQ6N01HUc
9ZCdZNRbvTw9dTX7E4ESZ+x8nZXFKcMq2oFvRqlyI3F8WWWLhRNPI5EjCToa
YkMifMZvA9PSXJfqU79h5fqYV4V1MdkUA+8IcSe4W75bsVjsD+iqMmN+OXPF
jba+mu3YdrHjsXaXZzn1nQtL0aY19iyj17KowpgW2OIeE2xmlOV9yH28yCzU
oPNZWZ6zp1pJn3pqIszOFu4DTZ3Uyzg4aMODTNtZshIm+pVVY8mYG79K2UoA
0H3LyFtqKRyWjTqsk8b2Dv8mXlMZGo8rjkMcdAYfxnfq4PB+erj3cj/dQJKU
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
nmnPbNXcr/2Edx/QZHZpPHhvRJP8hiZ762dK1/sI/gyo2p8pMGHJBjIEFSsR
sCobcwQYf+rCu0Bp8HOyE17jdqNl2TJouyeOTEGSXhTi92Amso9HPJ/+kDCY
ZREeEUl2D60NvwVHDYfYLYtuGP91q5De8EVGYHCYxFmlpwbMSTBNpeihOos8
7z0aPOqwHhIKsSCJjeSZMagPlvi9IvGWJX4E9VGZwl22n1GfTWhu6Y9tiySg
RgJJJYPTSAkS7Ogq0dcj/r3k/F5CRqKi0rp6yA+eL8XVUnubsnejNO6FfDqo
bG9S3kXp6qyWmowioRgwAuKGdz2RYtfS0Al5c6FLGjtgYKcijksL4nCwNGZ9
4oKn2MeCK22EEophA4dRYW8rHvbaWv28UM+MiNgY5Ep6Ezdzp6GyG+Z0b3vb
Pj14dmRO4Dfg+qCtU08tfLb18NMnJUmfCzPtggSiDlH/I2q05/vyro9kVXtF
vTWslyftXaLmtRyYaTULAB0hhwcCX6rv7zoBmdFgJ+pP/jk8xt+rejUD+qIN
HiS/NkEFO+84dnb4aUi/m6/TF1g7ywuQ5SO77fVzF0L1Q/IkCJ+XaXv44H6v
q5bTdcpoQR/c5yfXKmLuvCcHyR1VrC/ToFc28M/VxhjaZ2vjOwa4+Sb+RIib
b2KVBob6GtILQ3oR6ld+h3ob2twW9FlmJ/Snon9n9PeC/o5KuKtzVwXo/QG1
e0ct+3maVzbr/2veGzTvo+GjdZzGB5p/Tvlqmt7n6t5YgTfq3rf/MOX75e9v
vXRc2WTUvnvsVPWCfav/GYqYpUsNH2lHB0elm2jGnbZiDI4in3oklvs0HrYT
P5xc6XOizllxGpzyJZ1lPmEuyTnSU/u1drNJ7ebCdlq8yWxq2dHwRPfWKE57
B8U5aLV+52LCrZ9YWZgsZl9Y+C4vst5D0vQdHt40X68ZKmvdPRbY3wTx9b9N
c41GO8PRnzMldTG6f669dScldWtfUXddNyFjPyPWYyPVZyPWZyMYlLfPpd1+
YkTePss/oqBarBxXHjAX5XYXZY5KSSeIfEn81d9qxlCjaeamdbovH7PrDocA
SOiBE9hKZKCUCmYd+MvB0b5GD8DnxpW8heE7AQDxHIVGK4nCLWJMjm6C8E9j
CrTlg6LNzMi2vJaPgnFr7KAmKPEBV29EfDYaEfTzpLohviKuQrmJmwC6ESRD
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
FYgJoQAA

-->

</rfc>

